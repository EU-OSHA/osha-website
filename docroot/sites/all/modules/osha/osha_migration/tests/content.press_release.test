<?php
/**
 * Class MigrateOshaPressReleaseTest tests press release content type migration.
 */
class MigrateOshaPressReleaseTest extends OshaWebTestCase {

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Press release migration',
      'description' => 'Tests the migration of press releases content',
      'group' => 'OSHA',
    );
  }

  /**
   * Set environment.
   *
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();
    /* We enable osha_migration after standard profile installation! */
    module_enable(array('osha_migration'));
    $cfg = MigrationUtil::getProjectConfig();
    variable_set('osha_data_dir', $cfg['variables']['osha_data_dir']);
  }

  /**
   * Test the migration.
   */
  public function testMigration() {
    $module_path = drupal_get_path('module', 'osha_migration');

//    $source_file = $module_path . '/data/tags.json';
//    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_TAGS, 'MigrateOshaTaxonomyTags', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/press_release.txt';
    $result = MigrationUtil::runMigration(OSHA_MIGRATION_CONTENT_TYPE_PRESS_RELEASE, 'MigrateOshaPressRelease', $source_file);

    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', OSHA_PRESS_RELEASE_CONTENT_TYPE_PRESS_RELEASE)
      ->propertyCondition('status', 1);
    $result = $query->execute();
    $nodes = array();
    if (isset($result['node'])) {
      $nodes_nids = array_keys($result['node']);
      $nodes = entity_load('node', $nodes_nids);
    }
    $class = new PressReleaseMigrateList($source_file);
    $class->getIdList();
    $data = $class::$data;
    // First broken, second good.
    $this->assertEqual(1, count($nodes));

    $node = current($nodes);
    $path = path_load(array('source' => 'node/' . $node->nid, 'language' => 'en'));
    $path = $path['alias'];
    $witness = $data[$path];

    $this->assertEqual(strtotime($witness['creation_date']), $node->created);
    $this->assertEqual(strtotime($witness['modification_date']), $node->changed);
    $this->assertEqual(
      strtotime($witness['releaseDate']),
      strtotime($node->field_pr_release_date[LANGUAGE_NONE][0]['value']));
    $this->assertEqual(
      strtotime($witness['publication_date']),
      strtotime($node->field_publication_date[LANGUAGE_NONE][0]['value'])
    );

    $languages = language_list();
    foreach ($witness['path'] as $lang_code => $path) {
      $this->drupalGet(
        $path,
        array("language" => $languages[$lang_code])
      );

      $this->assertText($node->title_field[$lang_code][0]['value']);
    }
    foreach ($witness['title_field'] as $language => $title) {
      $this->assertEqual($title, $node->title_field[$language][0]['value']);
    }
    foreach ($witness['description'] as $language => $description) {
      $this->assertEqual($description, $node->field_summary[$language][0]['value']);
    }

    foreach ($witness['text'] as $language => $text) {
      $this->assertEqual(
        str_replace('<@#&>', '"', $text),
        $node->body[$language][0]['value']);
    }

    foreach ($witness['notesToEditors'] as $language => $notes) {
      $this->assertEqual(
        str_replace('<@#&>', '"', $notes),
        $node->field_pr_notes_to_editor[$language][0]['value']);
    }

    foreach ($witness['relatedLinks'] as $language => $links) {
      $links = explode(",", $links);
      $this->assertEqual(count($links), count($node->field_pr_related_links[$language]));

      foreach (array_combine($links, $node->field_pr_related_links[$language])
 as $witness_link => $node_link) {
        $this->assertEqual(trim($witness_link), $node_link['url']);
      }
    }
    $this->assertEqual(2, count($node->field_tags[LANGUAGE_NONE]));
    $tids = array(
      $node->field_tags[LANGUAGE_NONE][0]['tid'],
      $node->field_tags[LANGUAGE_NONE][1]['tid'],
    );
    $tags = taxonomy_term_load_multiple($tids);
    $terms = array();
    foreach ($tags as $term) {
      $terms[] = $term->field_tags_code[LANGUAGE_NONE][0]['value'];
    }
    $this->assertTrue(in_array('women_and_osh', $terms));
    $this->assertTrue(in_array('legislation', $terms));
  }
}
