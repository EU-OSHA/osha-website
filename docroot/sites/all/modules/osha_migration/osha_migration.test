<?php

/**
 * Class MigrateOshaTaxonomyTest test taxonomies migrations
 */
class MigrateOshaTaxonomyTest extends DrupalWebTestCase {

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'OSHA migrations tests',
      'description' => 'Tests functionalities provided by this module',
      'group' => 'OSHA',
    );
  }

  /**
   * Set environment.
   *
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('osha', 'osha_migration');
  }

  /**
   * Tests NACE codes migration.
   */
  public function testNaceCodesMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_NACE_CODES);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/nace_codes.json';
    $json = json_decode(file_get_contents($source_file), TRUE);
    $result = MigrationUtil::runMigration(
      OSHA_MIGRATION_TAXONOMY_NACE_CODES,
      'MigrateOshaTaxonomyNaceCodes',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witnesses = array();
    foreach ($json as $arr) {
      $code = $arr['NACE_REV_2_CODE'];
      $witnesses[$code] = $arr;
    }

    $weights = array("01" => 1, "01.1" => 1, "A" => 0);
    $parents = array("01" => 1, "01.1" => 1, "A" => 0);

    $field_mappings = MigrateOshaTaxonomyNaceCodes::getSourceDestinationFieldMappings();
    /* Test each node field value in all languages */
    foreach ($terms as $term) {
      $code = $term->field_nace_code[LANGUAGE_NONE][0]['value'];
      $source = $witnesses[$code];
      foreach ($field_mappings as $language => $mapping) {
        foreach ($mapping as $dest_field => $source_field) {
          if (!empty($source[$source_field])) {
            $subject = $term->{$dest_field}[$language][0]['value'];
            $this->assertEqual(
              $source[$source_field],
              $subject,
              sprintf('Invalid "%s" translation for "%s.%s"', $language, $code, $source_field)
            );
          }
        }
      }
      $this->assertEqual($weights[$code], $term->weight,
        sprintf('Wrong weight for term %s', $code)
      );
      $actual_parents = taxonomy_get_parents($term->tid);
      $this->assertEqual($parents[$code], count($actual_parents));
    }
    Migration::deregisterMigration(OSHA_MIGRATION_TAXONOMY_NACE_CODES);
  }

  /**
   * Test the ESENER migration.
   */
  public function testEsenerMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_ESENER);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/esener.json';
    $json = json_decode(file_get_contents($source_file), TRUE);
    $result = MigrationUtil::runMigration(
      OSHA_MIGRATION_TAXONOMY_ESENER,
      'MigrateOshaTaxonomyEsener',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witnesses = array();
    foreach ($json as $arr) {
      $code = $arr['code'];
      $witnesses[$code] = $arr;
    }

    $parents = array("indicator" => 0, "ghsme" => 1, 'mm154' => 1);
    /* Test node name_field value in all languages */
    $languages = array_keys(language_list());
    foreach ($terms as $term) {
      $code = $term->field_esener_code[LANGUAGE_NONE][0]['value'];
      $source = $witnesses[$code];
      foreach ($languages as $language) {
        if (!empty($source[$language])) {
          $this->assertEqual(
            $source[$language],
            $term->name_field[$language][0]['value'],
            sprintf('Invalid "%s" translation for "%s.name_field"', $language, $code)
          );
        }
      }
      $actual_parents = taxonomy_get_parents($term->tid);
      $this->assertEqual($parents[$code], count($actual_parents));
    }
    Migration::deregisterMigration(OSHA_MIGRATION_TAXONOMY_ESENER);
  }


  /**
   * Test publication types migration.
   */
  public function testPublicationTypesMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_PUBLICATION_TYPES);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/publication_types.json';
    $json = json_decode(file_get_contents($source_file), TRUE);
    $result = MigrationUtil::runMigration(
      OSHA_MIGRATION_TAXONOMY_PUBLICATION_TYPES,
      'MigrateOshaTaxonomyPublicationTypes',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witnesses = array();
    foreach ($json as $arr) {
      $code = $arr['code'];
      $witnesses[$code] = $arr;
    }

    /* Test node name_field value in all languages */
    $languages = array_keys(language_list());
    foreach ($terms as $term) {
      $code = $term->field_publication_type_code[LANGUAGE_NONE][0]['value'];
      $source = $witnesses[$code];
      foreach ($languages as $language) {
        if (!empty($source[$language])) {
          $this->assertEqual(
            $source[$language],
            $term->name_field[$language][0]['value'],
            sprintf('Invalid "%s" translation for "%s.name_field"', $language, $code)
          );
        }
      }
    }
    Migration::deregisterMigration(OSHA_MIGRATION_TAXONOMY_PUBLICATION_TYPES);
  }

  /**
   * Tests thesaurus migration.
   */
  public function testThesaurusMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_THESAURUS);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/thesaurus.json';
    $result = MigrationUtil::runMigration(
      OSHA_MIGRATION_TAXONOMY_THESAURUS,
      'MigrateOshaTaxonomyThesaurus',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $tmp = new ThesaurusMigrationItemJSON($source_file, array());
    $tmp->getItem(0);
    $witnesses = $tmp->getData();

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($witnesses), count($terms));

    $parents = array("06641B" => 0, "07401C" => 1);

    /* Test node name_field value in all languages */
    $languages = array_keys(language_list());
    foreach ($terms as $term) {
      $code = $term->field_thesaurus_code[LANGUAGE_NONE][0]['value'];
      $source = $witnesses[$code];
      foreach ($languages as $language) {
        if (!empty($source->{$language})) {
          $this->assertEqual(
            $source->$language,
            $term->name_field[$language][0]['value'],
            sprintf('Invalid "%s" translation for "%s.name_field"', $language, $code)
          );
        }
      }
      $actual_parents = taxonomy_get_parents($term->tid);
      $this->assertEqual($parents[$code], count($actual_parents));
    }
    Migration::deregisterMigration(OSHA_MIGRATION_TAXONOMY_THESAURUS);
  }

  /**
   * Test tags migration.
   */
  public function testTagsMigration() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_TAGS);
    $source_file = drupal_get_path('module', 'osha_migration') . '/data/tags.json';
    $json = json_decode(file_get_contents($source_file), TRUE);

    $result = MigrationUtil::runMigration(
      OSHA_MIGRATION_TAXONOMY_TAGS,
      'MigrateOshaTaxonomyTags',
      $source_file
    );
    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $terms = taxonomy_term_load_multiple(array(), array('vid' => $vocabulary->vid));
    $this->assertEqual(count($json), count($terms));

    $witness = array();
    foreach ($json as $arr) {
      $code = $arr['code'];
      $witness[$code] = count(array_filter($arr)) - 1;
    }

    foreach ($terms as $term) {
      $code = $term->field_tags_code[LANGUAGE_NONE][0]['value'];
      $this->assertEqual(
        $witness[$code], count($term->name_field),
        sprintf('Invalid translations for %s.%s (%s != %s)',
          $term->name, 'name_field', $witness[$code], count($term->name_field))
      );
    }
    Migration::deregisterMigration(OSHA_MIGRATION_TAXONOMY_TAGS);
  }
}

/**
 * Class MigrateOshaNewsTest tests news content type migration
 */
class MigrateOshaNewsTest extends DrupalWebTestCase {

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'OSHA news migration testing',
      'description' => 'Tests the News migration',
      'group' => 'OSHA',
    );
  }

  /**
   * Set environment.
   *
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('path', 'pathauto', 'views', 'osha', 'osha_taxonomies', 'osha_publication', 'osha_migration');
    $cfg = MigrationUtil::getProjectConfig();
    variable_set('osha_data_dir', $cfg['variables']['osha_data_dir']);
  }

  /**
   * Test the migration.
   */
  public function testMigration() {
    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/thesaurus.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_THESAURUS, 'MigrateOshaTaxonomyThesaurus', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/tags.json';
    MigrationUtil::runMigration(OSHA_MIGRATION_TAXONOMY_TAGS, 'MigrateOshaTaxonomyTags', $source_file);

    $source_file = drupal_get_path('module', 'osha_migration') . '/data/test/news.txt';
    $result = MigrationUtil::runMigration(OSHA_MIGRATION_CONTENT_TYPE_NEWS, 'MigrateOshaNews', $source_file);

    $this->assertEqual($result, Migration::RESULT_COMPLETED);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', OSHA_NEWS_CONTENT_TYPE_NEWS)
      ->propertyCondition('status', 1);
    $result = $query->execute();
    $nodes = array();
    if (isset($result['node'])) {
      $nodes_nids = array_keys($result['node']);
      $nodes = entity_load('node', $nodes_nids);
    }

    $class = new NewsContentListCSV(
      $source_file,
      array('title', 'description', 'text')
    );
    $class->getIdList();
    $data = $class::$data;
    $this->assertEqual(count($data), count($nodes));

    foreach ($nodes as $node) {
      $path = path_load('node/' . $node->nid);
      $path = $path['alias'];
      $witness = $data[$path];

      $this->assertEqual(strtotime($witness['creation_date']), $node->created);
      $this->assertEqual(strtotime($witness['modification_date']), $node->changed);
      $this->assertEqual(
        strtotime($witness['publication_date']),
        strtotime($node->field_news_publication_date['und'][0]['value'])
      );
      foreach ($witness['title'] as $lang => $title) {
        $this->assertEqual($title, $node->title_field[$lang][0]['value']);
        /* TODO: Test body and tags */
        $this->assertEqual(
          str_replace('<@#&>', '"', $witness['description'][$lang]),
          $node->field_news_summary[$lang][0]['value']
        );
      }
    }
  }
}

class MigrationUtilTest extends DrupalWebTestCase {

  private $tmpFile = NULL;

  /**
   * Test information.
   *
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Utilities testing',
      'description' => 'Tests the migration utilities',
      'group' => 'OSHA',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp('osha_migration');
    $this->tmpFile = file_directory_temp() . '/test.tmp';
    file_put_contents($this->tmpFile, 'Delete me ...');
    $this->assertTrue(file_exists($this->tmpFile));
    $this->assertTrue(is_readable($this->tmpFile));

    $voc = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_TAGS);

    $term1 = new stdClass();
    $term1->name = 'Accident prevention';
    $term1->name_field['en'][0]['value'] = 'Accident prevention';
    $term1->name_field['ro'][0]['value'] = 'Prevenirea accidentelor';
    $term1->field_tags_code['und'][0]['value'] = 'accident_prevention';
    $term1->vid = $voc->vid;
    taxonomy_term_save($term1);
    $this->assertEqual(1, $term1->tid);

    $term2 = new stdClass();
    $term2->name = 'Dangerous substances';
    $term2->name_field['en'][0]['value'] = 'Dangerous substances';
    $term2->name_field['ro'][0]['value'] = 'Substanţe periculoase';
    $term2->field_tags_code['und'][0]['value'] = 'dangerous_substances';
    $term2->vid = $voc->vid;

    taxonomy_term_save($term2);
    $this->assertEqual(2, $term2->tid);
  }

  /**
   * {@inheritdoc}
   */
  public function tearDown() {
    unlink($this->tmpFile);
    parent::tearDown();
  }

  /**
   * Test getSourceFile().
   */
  public function testGetSourceFile() {
    try {
      MigrationUtil::getSourceFile(NULL);
      $this->fail('Throw exception about missing `file_name` argument');
    }
    catch(Exception $e) {}

    try {
      MigrationUtil::getSourceFile(array());
      $this->fail('Throw exception about missing `file_name` argument');
    }
    catch(Exception $e) {}

    $arguments = array('file_name' => $this->tmpFile);
    $subject = MigrationUtil::getSourceFile($arguments);
    $this->assertEqual($this->tmpFile, $subject);
  }


  /**
   * Test findTidByTaxonomyField().
   */
  public function testFindTidByTaxonomyField() {
    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' accident_prevention ', ' dangerous_substances', '  '),
      'field_tags_code',
      OSHA_TAXONOMIES_TAGS
    );
    $this->assertEqual(2, count($subject));
    $this->assertTrue(in_array(1, $subject));
    $this->assertTrue(in_array(2, $subject));

    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' dangerous_substances', 'x'),
      'field_tags_code',
      OSHA_TAXONOMIES_TAGS
    );
    $this->assertEqual(1, count($subject));
    $this->assertTrue(in_array(2, $subject));

    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' Dangerous substances ', ' Accident prevention', '  '),
      'name_field',
      OSHA_TAXONOMIES_TAGS,
      'en'
    );
    $this->assertEqual(2, count($subject));
    $this->assertTrue(in_array(1, $subject));
    $this->assertTrue(in_array(2, $subject));

    $subject = MigrationUtil::findTidByTaxonomyField(
      array(' Prevenirea accidentelor ', ' Substanţe periculoase', '  '),
      'name_field',
      OSHA_TAXONOMIES_TAGS,
      'ro'
    );
    $this->assertEqual(2, count($subject));
    $this->assertTrue(in_array(1, $subject));
    $this->assertTrue(in_array(2, $subject));

    $subject = MigrationUtil::findTidByTaxonomyField(
      NULL,
      'name_field',
      OSHA_TAXONOMIES_TAGS,
      'ro'
    );
    $this->assertEqual(0, count($subject));
  }

  /**
   * Test decodeTagsTerms().
   */
  public function testDecodeTagsTerms() {
    $subject = MigrationUtil::decodeTagsTerms(
      ' accident_prevention,  dangerous_substances, '
    );
    $this->assertEqual(2, count($subject));
    $this->assertTrue(in_array(1, $subject));
    $this->assertTrue(in_array(2, $subject));

    $subject = MigrationUtil::decodeTagsTerms(NULL);
    $this->assertEqual(0, count($subject));
  }

  /**
   * Test parseRelatedItemsString().
   */
  public function testParseRelatedItemsString() {
    $input = '';
    $subject = MigrationUtil::parseRelatedItemsString($input);
    $this->assertEqual(array('items' => NULL, 'files' => NULL), $subject);

    $input = '/en/publication1/en/p2, /en/publication2, /file1.pptx, /file2.ppt';
    $subject = MigrationUtil::parseRelatedItemsString($input);
    $this->assertEqual(2, count($subject['items']));
    $this->assertTrue(in_array('publication1/en/p2', $subject['items']));
    $this->assertTrue(in_array('publication2', $subject['items']));

    $this->assertEqual(2, count($subject['files']));
    $this->assertTrue(in_array('/file1.pptx', $subject['files']));
    $this->assertTrue(in_array('/file2.ppt', $subject['files']));


    $input = '/en/publication1, /en/publication2, /file1.pptx, /file2.XXX';
    $subject = MigrationUtil::parseRelatedItemsString($input);
    $this->assertEqual(1, count($subject['files']));
    $this->assertTrue(in_array('/file1.pptx', $subject['files']));
  }

  /**
   * Test findTermByFieldValue().
   */
  public function testFindTermByFieldValue() {
    $tid = MigrationUtil::findTermByFieldValue('accident_prevention', 'field_tags_code');
    $this->assertEqual(1, $tid);

    $tid = MigrationUtil::findTermByFieldValue('Substanţe periculoase', 'name_field');
    $this->assertEqual(2, $tid);

    $tid = MigrationUtil::findTermByFieldValue('Dangerous substances', 'name');
    $this->assertNull($tid);
  }
}
