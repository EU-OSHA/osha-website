<?php
/**
 * User: Dragos Dumitrescu
 * Date: 6/27/14
 */


/**
 * Implements hook_module_implements_alter
 *
 */
function doc_to_imagefield_module_implements_alter(&$implementations, $hook) {
    if ($hook != 'entity_update') {
        return;
    }

    // Add this module hook first to be executed before pdf_to_image
    if (isset($implementations['pdf_to_image'])) {
        unset($implementations['ppt_to_imagefield']);
        $implementations = array( 'ppt_to_imagefield' => FALSE) + $implementations;
    }
}


/**
 * Implements hook_entity_insert()
 *
 */
function doc_to_imagefield_entity_insert($entity, $entity_type) {
    doc_to_imagefield_entity_update($entity, $entity_type);
    return;
}

/**
 * Implements hook_entity_update()
 *
 */
function doc_to_imagefield_entity_update($entity, $entity_type) {
    //Code adapted from pdf_to_imagefield
    $info = entity_get_info($entity_type);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $pdf_fields = pdf_to_image_source_fields($entity_type, $bundle);

    foreach ($pdf_fields as $field_id => $field_instance) {
        doc_to_image_generate_process($entity_type, $entity, $field_id, $field_instance);
    }
}

/**
 * Processing ppt file to image creation.
 *
 */
function doc_to_image_generate_process($entity_type, $entity, $field_id, $field_instance) {
    $field_lang = field_language($entity_type, $entity, $field_id);
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $items = $entity->{$field_id};

    if (empty($items[$field_lang][0]['fid'])) {
        // No file attachment found in the source field.
        return;
    }


    $doc_file = file_load($items[$field_lang][0]['fid']);
    $doc_realpath = file_stream_wrapper_get_instance_by_uri($doc_file->uri)->realpath();
    $path_parts = pathinfo($doc_realpath);

    if (!empty($path_parts['extension']) && $path_parts['extension'] != 'pdf') {
        // if not pdf
        $temp_path = drupal_realpath(file_directory_temp());

        //Transform document to pdf with OpenOffice
        $exec = shell_exec(
            "/usr/bin/soffice --headless --accept='socket,host=127.0.0.1,port=8100;urp;' ".
            " --convert-to pdf " . $doc_realpath . " --outdir " . $temp_path ." --nofirststartwizard"
        );

        if ($exec != NULL) {

            $pdf_filename =  $path_parts['filename'] . '.pdf';
            $pdf_realpath = $temp_path . DIRECTORY_SEPARATOR . $pdf_filename;

            //save the file in drupal - used in func pdf_to_image_generate_page
            $pdf_file = file_save_data(file_get_contents($pdf_realpath), 'public://'.$pdf_filename);


            //Following code is adapted from pdf_to_imagefield module

            $count = pdf_to_image_count_pages($pdf_realpath);
            if (!empty($field_instance['widget']['settings']['pdf_to_image']['target_field'])) {
                $target_field = $field_instance['widget']['settings']['pdf_to_image']['target_field'];
            }

            if (!empty($target_field) && $count) {

                $params = array(
                    'entity' => $entity,
                    'entity_type' => $entity_type,
                    'entity_id' => $id,
                    'image'  => array(
                        'field'    => field_info_field($target_field),
                        'instance' => field_info_instance($entity_type, $target_field, $field_instance['bundle']),
                    ),
                    'pdf'    => array(
                        'instance' => $field_instance,
                        'file'     => $pdf_file,
                    ),
                );

                $image = pdf_to_image_generate_page($params, 0);

                if (!empty($image)) {
                    $results['files'] [] = $image;
                    $results['params'] = $params;

                    $field_lang = field_language($entity_type, $entity, $target_field);
                    if (empty($entity->{$target_field}[$field_lang])) {
                        $entity->{$target_field}[$field_lang] = array( (array) $image );
                        entity_get_controller($entity_type)->resetCache(array($entity->uid));
                        field_attach_update($entity_type, $entity);
                    }
                }

                //delete the temp pdf file from drupal and temp folder
                file_delete($pdf_file);
                drupal_unlink($pdf_realpath);
            }
            else {
                // No target image field set, or invalid count from the PDF.
            }
        } else {
            drupal_set_message("Could not convert " . $path_parts['basename'] ." to .pdf", 'error');
        }

    }


}
