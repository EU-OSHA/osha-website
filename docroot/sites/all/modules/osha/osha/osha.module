<?php

include_once 'osha.features.inc';
include_once 'osha.utils.inc';
include_once 'osha.pathauto.inc';

define('OSHA_ARTICLE_CONTENT_TYPE_ARTICLE', 'article');
define('OSHA', 'OSHA');

/**
 * Implements hook_token_info().
 */
function osha_token_info() {
  $info['tokens']['site']['site-language'] = array(
    'name' => t('Site language'),
    'description' => t('Site language'),
    'type' => 'array',
  );
  $info['tokens']['site']['menu-level1'] = array(
    'name' => t('menu level1'),
    'description' => t('Site level 1 menu'),
    'type' => 'array',
  );
  $info['tokens']['site']['menu-level2'] = array(
    'name' => t('menu level2'),
    'description' => t('Site level 2 menu'),
    'type' => 'array',
  );
  $info['tokens']['site']['menu-level3'] = array(
    'name' => t('menu level3'),
    'description' => t('Site level 3 menu'),
    'type' => 'array',
  );
  $info['tokens']['site']['menu-level4'] = array(
    'name' => t('menu level4'),
    'description' => t('Site level 4 menu'),
    'type' => 'array',
  );
  $info['tokens']['site']['menu-level5'] = array(
    'name' => t('menu level5'),
    'description' => t('Site level 5 menu'),
    'type' => 'array',
  );
  return $info;
}

function osha_get_menu_level($level) {
  static $menu;
  if (!$menu) {
    $active_trail = menu_get_active_trail();
    if ($active_trail) {
      array_shift($active_trail);
      if ($active_trail) {
        array_shift($active_trail);
      }
    }
    if (variable_get('osha_menu_level_reverse', FALSE)) {
      krsort($active_trail);
    }
    $menu = [];
    foreach ($active_trail as $trail) {
      $menu[] = check_plain($trail['title']);
    }
  }
  if (isset($menu[$level])) {
    return $menu[$level];
  }
  return NULL;
}

/**
 * Implements hook_tokens().
 */
function osha_tokens($type, $tokens, array $data = array(), array $options = array()) {
  global $language;
  $replacements = array();
  // Site tokens.
  if ($type == 'site') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'site-language':
          $replacements[$original] = $language->language;
          break;

        case 'menu-level1':
          $replacements[$original] = osha_get_menu_level(0);
          break;

        case 'menu-level2':
          $replacements[$original] = osha_get_menu_level(1);
          break;

        case 'menu-level3':
          $replacements[$original] = osha_get_menu_level(2);
          break;

        case 'menu-level4':
          $replacements[$original] = osha_get_menu_level(3);
          break;

        case 'menu-level5':
          $replacements[$original] = osha_get_menu_level(4);
          break;

      }
    }
  }
  return $replacements;
}

/**
 * Implements hook_menu().
 */
function osha_menu() {
  $items = array();
  $items['imce_images'] = array(
    'title' => 'File browser',
    'page callback' => 'imce',
    'access callback' => 'imce_access',
    'access arguments' => array(FALSE, 1),
    'file path' => drupal_get_path('module', 'imce') . '/inc',
    'file' => 'imce.page.inc',
    'type' => MENU_CALLBACK,
  );

  $items['imce_files'] = array(
    'title' => 'File browser',
    'page callback' => 'imce',
    'access callback' => 'imce_access',
    'access arguments' => array(FALSE, 1),
    'file path' => drupal_get_path('module', 'imce') . '/inc',
    'file' => 'imce.page.inc',
    'type' => MENU_CALLBACK,
  );

  $items['users/autocomplete/%'] = array(
    'title' => 'Autocomplete for cities',
    'page callback' => 'osha_users_autocomplete',
    'page arguments' => array(2),
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
  );

  $items['export/node/%node'] = array(
    'page callback' => 'osha_export_node',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['export/taxonomy_term/%taxonomy_term'] = array(
    'page callback' => 'osha_export_taxonomy_term',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/view_all_translations'] = array(
    'title' => 'View all translations',
    'access arguments' => array('view the administration theme'),
    'page callback' => 'osha_view_all_node_translations',
    'page arguments' => array(1),
    'weight' => 8,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/open_all_translations'] = array(
    'title' => 'Edit all translations',
    'access arguments' => array('view the administration theme'),
    'page callback' => 'osha_open_all_node_translations',
    'page arguments' => array(1),
    'weight' => 9,
    'type' => MENU_LOCAL_TASK,
  );

//  $items['admin/config/regional/osha_language'] = array(
//    'title' => 'EU-OSHA Languages',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('osha_admin_languages_form'),
//    'access arguments' => array('administer site configuration'),
//    'type' => MENU_CALLBACK,
//  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function osha_menu_alter(&$items) {
  if (isset($items['aggregator/sources/%aggregator_feed'])) {
    $items['aggregator/sources/%aggregator_feed']['page callback'] = 'osha_aggregator_page_source';
  }
}

/**
 * Override aggregator_page_source to localize the title.
 */
function osha_aggregator_page_source($feed) {
  drupal_set_title(t($feed->title));
  $feed_source = theme('aggregator_feed_source', array('feed' => $feed));

  // It is safe to include the fid in the query because it's loaded from the
  // database by aggregator_feed_load.
  $items = aggregator_feed_items_load('source', $feed);

  return _aggregator_page_list($items, arg(3), $feed_source);
}

/**
 * Implements hook_node_update().
 */
function osha_node_update($node) {
  osha_expire_node_page($node);
}

/**
 * Implements hook_nodequeue_sort_alter().
 */
function osha_nodequeue_sort_alter(&$nodes, $sqid) {
  if ($sqid == 4 || $sqid == 5) {
    osha_expire_view_page('about-eu-osha/press-room');
  }
  if ($sqid == 6) {
    osha_expire_view_page('tools-and-publications/publications');
  }
}

/**
 * Implements hook_query_TAG_alter().
 *
 * @see menu_view_unpublished_query_node_access_alter() in the module.
 * @see menu_tree_check_access()
 *   Contains the query being altered here. This is most likely the only query
 *   with tag node_access where the first condition is for the node.status column.
 */
function osha_query_node_access_alter(QueryAlterableInterface $query) {
  if (user_access('view all unpublished content')) {
    $c = &$query->conditions();
    // Remove the status condition if we suspect this query originates from
    // menu_tree_check_access().
    if (count($c) == 3 &&
      is_string($c[0]['field']) && $c[0]['field'] == 'n.status' &&
      is_string($c[1]['field']) && $c[1]['field'] == 'n.nid' && $c[1]['operator'] == 'IN') {
      unset($c[0]);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_form_menu_overview_form_alter(&$form, &$form_state) {
  // iterate over the form's children
  foreach(element_children($form) as $form_child_key) {
    // act upon children of the form that are menu items (have 'mlid' in the key name)
    if(preg_match('/mlid/', $form_child_key)) {
      if(preg_match('@^node/(\d+)$@', $form[$form_child_key]['#item']['link_path'], $matches)) {
        $status = _osha_get_node_status($matches[1]);
        if ($status == NODE_NOT_PUBLISHED) {
          $form[$form_child_key]['#attributes']['class'][] = 'menu-node-unpublished';
        }
      }
    }
  }
}

/**
 * Implements template_preprocess().
 */
function osha_preprocess_menu_link(&$variables) {
  if (user_access('view all unpublished content')) {
    $element = &$variables['element'];
    // Add a class to menu links that link to unpublished nodes.
    if (preg_match('@^node/(\d+)$@', $element['#href'], $matches)) {
      $status = _osha_get_node_status($matches[1]);
      if ($status == NODE_NOT_PUBLISHED) {
        if (empty($element['#attributes']['class'])){
          $element['#attributes']['class'] = array();
        }
        $element['#attributes']['class'][] = 'menu-node-unpublished';
      }
    }
  }
}

/**
 * Gets the node status based on nid.
 */
function _osha_get_node_status($nid) {
  $statuses = &drupal_static(__FUNCTION__);
  if (!isset($statuses[$nid])) {
    $statuses[$nid] = db_select('node')
      ->fields('node', array('status'))
      ->condition('nid', $nid)
      ->execute()
      ->fetchField();
  }
  return $statuses[$nid];
}

/**
 * Implements hook_js_alter().
 */
function osha_js_alter(&$javascript) {
  if (empty($javascript['settings']['data'])) {
    return;
  }
  foreach($javascript['settings']['data'] as $k => &$v) {
    if (array_key_exists('eu_cookie_compliance', $v)) {
      $popup_en = variable_get('eu_cookie_compliance_en', array());

      $popup_text_info = str_replace(array("\r", "\n"), '', t($popup_en['popup_info']['value']));
      $html_info = theme('eu_cookie_compliance_popup_info', array(
        'message' => check_markup($popup_text_info, $popup_en['popup_info']['format'], FALSE),
        'agree_button'=> t($popup_en['popup_agree_button_message']),
        'disagree_button' => t($popup_en['popup_disagree_button_message'])));
      $popup_text_agreed = str_replace(array("\r", "\n"), '', t($popup_en['popup_agreed']['value']));
      $html_agreed = theme('eu_cookie_compliance_popup_agreed', array(
        'message' => check_markup($popup_text_agreed, $popup_en['popup_agreed']['format'], FALSE),
        'hide_button' => t($popup_en['popup_hide_button_message']),
        'find_more_button' => t($popup_en['popup_find_more_button_message'])));

      $v['eu_cookie_compliance']['popup_html_info'] = empty($html_info) ? FALSE : $html_info;
      $v['eu_cookie_compliance']['popup_html_agreed'] = empty($html_agreed) ? FALSE : $html_agreed;
      break;
    }
  }
}

function osha_users_autocomplete($role_name, $name) {
  $output = array();
  $query = db_select('users', 'u')
    ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'u.uid = ur.uid');
  $query->condition('u.status', 1);
  if (!empty($role_name) || $role_name != 'all') {
    $role = user_role_load_by_name($role_name);
    if ($role) {
      $query->condition('ur.rid', $role->rid);
    }
    else {
      $query->condition('ur.rid', 0);
    }
  }
  $query->condition('u.name', '%' . $name . '%', 'LIKE');
  $uids = $query->execute()
    ->fetchAllAssoc('uid');
  if (!empty($uids)) {
    $uids = array_keys($uids);
    $users = user_load_multiple($uids);
    foreach ($users as $user) {
      $output[$user->name] = $user->name;
    }
  }
  drupal_json_output($output);
}

/**
 * Implements hook_osha_tmgmt_i18n_string_list().
 */
function osha_osha_tmgmt_i18n_string_list() {
  module_load_include('inc', 'osha', 'osha.translate');
  return osha_get_translatable_strings();
}


/**
 * Implements hook_schema_alter().
 */
function osha_schema_alter(&$schema) {
  if (isset($schema['taxonomy_term_data'])) {
    $schema['taxonomy_term_data']['fields']['name'] = array(
      'type' => 'varchar',
      'length' => 768,
      'not null' => TRUE,
      'default' => '',
    );
  }

  if (isset($schema['field_data_name_field'])) {
    $schema['field_data_name_field']['fields']['name_field_value'] = array(
      'type' => 'varchar',
      'length' => 768,
      'not null' => TRUE,
      'default' => '',
    );
  }

  if (isset($schema['field_revision_name_field'])) {
    $schema['field_revision_name_field']['fields']['name_field_value'] = array(
      'type' => 'varchar',
      'length' => 768,
      'not null' => TRUE,
      'default' => '',
    );
  }

  if (isset($schema['field_data_title_field'])) {
    $schema['field_data_title_field']['fields']['title_field_value'] = array(
      'type' => 'varchar',
      'length' => 768,
      'not null' => TRUE,
      'default' => '',
    );
  }

  if (isset($schema['field_revision_title_field'])) {
    $schema['field_revision_title_field']['fields']['title_field_value'] = array(
      'type' => 'varchar',
      'length' => 768,
      'not null' => TRUE,
      'default' => '',
    );
  }

  if (isset($schema['url_alias'])) {
    $schema['url_alias']['fields']['alias'] = array(
      'type' => 'varchar',
      'length' => 768,
      'not null' => TRUE,
      'default' => '',
    );
  }
}

/**
 * Implements hook_date_format_types().
 */
function osha_date_format_types() {
  return array(
    'year'  => t('Year'),
    'short_date_eu'  => t('EU short date'),
    'pubdate_rss'  => t('pubDate RSS'),
    'osha_day_only'  => t('Day only'),
    'month' => t('Month: F'),
    'year_and_month'  => t('Year and Month'),
  );
}

/**
 * Implements hook_date_formats().
 */
function osha_date_formats() {
  $formats = array(
    array(
      'type' => 'year', 'format'  => 'Y', 'locales' => array(),
    ),
    array(
      'type' => 'short_date_eu', 'format'  => 'd/m/Y - H:i', 'locales' => array(),
    ),
    array(
      'type' => 'pubdate_rss', 'format'  => 'r', 'locales' => array(),
    ),
    array(
      'type' => 'osha_day_only', 'format'  => 'd/m/Y', 'locales' => array(),
    ),
    array(
      'type' => 'month', 'format' => 'F', 'locales' => array(),
    ),
    array(
      'type' => 'year_and_month', 'format' => 'F Y', 'locales' => array(),
    ),
  );
  foreach ($formats as $format) {
    variable_set('date_format_' . $format['type'], $format['format']);
  }
  return $formats;
}

/**
 * Configure date and time-zone related settings.
 */
function osha_configure_date_settings() {
  variable_set('date_first_day', '1');
  variable_set('site_default_country', 'ES');
  variable_set('date_default_timezone', 'Europe/Madrid');
  variable_set('configurable_timezones', '0');
  variable_set('user_default_timezone', '0');

  // Create the format for OSHA date.
  module_load_include('inc', 'system', 'system.admin');
  $osha_long_format = 'd/m/Y - H:i';
  $formats = system_get_date_formats('custom');
  if (empty($formats) || is_array($formats) && !array_key_exists($osha_long_format, $formats)) {
    $form_state = array('values' => array('date_format' => $osha_long_format));
    drupal_form_submit('system_configure_date_formats_form', $form_state);
  }
  else {
    drupal_set_message('OSHA long date format already exists ... skipping', 'warning');
  }
  drupal_set_message('Setting short, medium and long date formats to DD/MM/YYYY - HH:MM');
  variable_set('date_format_long', $osha_long_format);
  variable_set('date_format_medium', $osha_long_format);
  variable_set('date_format_short', $osha_long_format);
}

/**
 * Set-up language detection to use URL pattern.
 */
function osha_configure_language_detection() {
  module_load_include('inc', 'locale', 'locale.admin');
  $form_state['values']['language']['enabled']['locale-url'] = 1;
  $form_state['values']['language']['weight']['locale-url'] = -8;
  $form_state['values']['language']['enabled']['language-default'] = 1;
  $form_state['values']['language']['weight']['language-default'] = 10;
  $form_state['values']['language_content']['enabled']['locale-url'] = 1;
  $form_state['values']['language_content']['weight']['locale-url'] = -8;
  $form_state['values']['language_content']['enabled']['language-default'] = 1;
  $form_state['values']['language_content']['weight']['language-default'] = 10;
  drupal_form_submit('locale_languages_configure_form', $form_state);
}

/**
 * Change field size to 768 characters for Esener questions.
 *
 * Applies to the following fields:
 *  - taxonomy_term_data.name
 *  - field_data_name_field.name_field_value
 *  - field_revision_name_field.name_field_value
 */
function osha_change_field_size() {
  $column_size = 768;
  if (osha_get_mysql_column_size('taxonomy_term_data', 'name') < $column_size) {
    drupal_set_message("Changing taxonomy_term_data size to $column_size");
    db_change_field('taxonomy_term_data', 'name', 'name',
      array('type' => 'varchar','length' => $column_size)
    );
  }

  if (osha_get_mysql_column_size('field_data_name_field', 'name_field_value') < $column_size) {
    drupal_set_message("Changing field_data_name size to $column_size");
    db_change_field('field_data_name_field', 'name_field_value', 'name_field_value',
      array('type' => 'varchar', 'length' => $column_size)
    );
  }

  if (osha_get_mysql_column_size('field_revision_name_field', 'name_field_value') < $column_size) {
    drupal_set_message("Changing field_revision_name size to $column_size");
    db_change_field('field_revision_name_field', 'name_field_value', 'name_field_value',
      array('type' => 'varchar','length' => $column_size)
    );
  }

  if (osha_get_mysql_column_size('field_data_title_field', 'title_field_value') < $column_size) {
    drupal_set_message("Changing field_data_title_field size to $column_size");
    db_change_field('field_data_title_field', 'title_field_value', 'title_field_value',
      array('type' => 'varchar', 'length' => $column_size)
    );
  }

  if (osha_get_mysql_column_size('field_revision_title_field', 'title_field_value') < $column_size) {
    drupal_set_message("Changing field_revision_title_field size to $column_size");
    db_change_field('field_revision_title_field', 'title_field_value', 'title_field_value',
      array('type' => 'varchar','length' => $column_size)
    );
  }

  if (osha_get_mysql_column_size('url_alias', 'alias') < $column_size) {
    drupal_set_message("Changing url_alias size to $column_size");
    db_change_field('url_alias', 'alias', 'alias',
      array('type' => 'varchar','length' => $column_size)
    );
  }

  drupal_set_message("Changing block.delta size to 255");
  db_change_field('block', 'delta', 'delta',
    array('type' => 'varchar','length' => 255)
  );

}


/**
 * Function to retrive the size of a MySQL varchar column from a table.
 *
 * @param string $table
 *   Target database table name
 * @param string $column
 *   Target column
 *
 * @return int
 *   Column size in characters
 */
function osha_get_mysql_column_size($table, $column) {
  $result = db_query("
		SELECT CHARACTER_MAXIMUM_LENGTH
		FROM information_schema.columns
		WHERE table_schema = DATABASE()
			AND table_name = :table AND COLUMN_NAME = :column",
    array(':table' => $table, ':column' => $column)
  );
  return $result->fetchField(0);
}

/**
 * Replace the node title with field_tile for page/article. Uses title module.
 *
 * Warning: Assuming no content is present
 */
function osha_replace_title_field() {
  if (module_load_include('module', 'title', 'title')) {
    $types = array('article', 'page');
    foreach ($types as $bundle) {
      // Inspired by https://www.drupal.org/files/1801242-title-upgrade.patch
      title_field_replacement_toggle('node', $bundle, 'title');
      drupal_set_message(
        t('Replacing title_field for !bundle', array('!bundle' => $bundle))
      );
    }
  }
  else {
    drupal_set_message('osha_replace_title_field: Title module not available', 'warning');
  }
}

/**
 * Enable translation for the basic page entity.
 */
function osha_configure_basic_page() {
  if (module_load_include('inc', 'node', 'content_types')) {
    $form_state['values']['language_content_type'] = ENTITY_TRANSLATION_ENABLED;
    $form_state['values']['entity_translation_hide_translation_links'] = 1;
    $form_state['values']['promote'] = NULL;
    $form_state['values']['comment'] = 1;
    $type = node_type_load('page');
    drupal_form_submit('node_type_form', $form_state, $type);
    $errors = form_get_errors();
    if (!empty($errors)) {
      foreach ($errors as $error) {
        drupal_set_message(
          t('Basic page setup error: !error', array('!error' => $error))
        );
      }
    }
  }
  else {
    drupal_set_message('osha_configure_basic_page: content_types module not available', 'warning');
  }
}

/**
 * Enable translation for the tags taxonomy..
 */
function osha_configure_tags_taxonomy() {
  if (module_load_include('inc', 'taxonomy', 'taxonomy.admin')) {
    $form_state['values']['i18n_mode'] = 1;
    $form_state['triggering_element']['#value'] = t('Save');
    $form_state['triggering_element']['#name'] = 'op';
    $type = taxonomy_vocabulary_machine_name_load(OSHA_TAXONOMIES_TAGS);
    drupal_form_submit('taxonomy_form_vocabulary', $form_state, $type);
    $errors = form_get_errors();
    if (!empty($errors)) {
      foreach ($errors as $error) {
        drupal_set_message(
          t('Tags setup error: !error', array('!error' => $error))
        );
      }
    }
  }
  else {
    drupal_set_message('osha_configure_tags_taxonomy: taxonomy module not available', 'warning');
  }
}

/**
 * Make the field_image field translatable.
 */
function osha_enable_field_image_translations() {
  if (module_load_include('inc', 'entity_translation', 'entity_translation.admin')) {
    $info = field_info_field('field_image');
    if ($info !== NULL) {
      drupal_set_message('Making field_image field translatable');
      $form_state['values']['translatable'] = "0";
      $form_state['field']['field_name'] = 'field_image';
      drupal_form_submit('entity_translation_translatable_form', $form_state, 'field_image');
    }
    else {
      drupal_set_message('field_image field not available yet', 'error');
    }
  }
  else {
    drupal_set_message('osha_configure_basic_page: entity_translation module not available', 'error');
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function osha_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['osha_slideshow'] = array(
    'label' => t('Osha Slideshow'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['osha_search_teaser'] = array(
    'label' => t('Search teaser'),
    'custom settings' => FALSE,
  );
}

function osha_enabled_language_list() {
  return array('en','bg','cs','da','de','el','es','et','fi','hr','fr','hu','is','it','lv','lt','nl','mt','no','pl','pt','ro','sk','sl','sv');
}

function osha_disabled_language_list() {
  $disabled = array_diff_key(language_list(), drupal_map_assoc(osha_enabled_language_list()));
  return drupal_map_assoc(array_keys($disabled));
}

/**
 * Get OSHA official language list.
 *
 * @param bool $osha_sorted
 *   if sorted by EU-OSHA specifications.
 *
 * @return array
 *   of language objects.
 */
function osha_language_list($osha_sorted = FALSE) {
  $languages = array_intersect_key(language_list(), drupal_map_assoc(osha_enabled_language_list()));
  if ($osha_sorted) {
    $languages = osha_sort_language_list($languages);
  }
  return $languages;
}

function osha_language_list_options() {
  $languages = osha_language_list();
  $return = array();
  foreach ($languages as $lang => $language) {
    $return[$lang] = $language->name;
  }
  return $return;
}

//function osha_admin_languages_form($form, &$form_state) {
//  $languages = language_list();
//  module_load_include('inc', 'ctools', 'includes/language');
//  $languages_options = array();
//  foreach ($languages as $lang => $language) {
//    $languages_options[$lang] = $language->name;
//  }
//}

/**
 * Implements hook_form_alter().
 */
function osha_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  array_unshift($form['#validate'], 'osha_node_validate_prepare');

  $in_users_cart = FALSE;
  if (isset($form['#node'])) {
    $node = $form['#node'];
    if (isset($node->nid)) {
      $jobs = tmgmt_ui_cart_get()->getJobItemsFromCart();
      foreach ($jobs as $job) {
        if ($job->plugin == 'entity' && $job->item_id == $node->nid) {
          drupal_set_message(t('This node is in the translation cart!'), 'warning');
          $in_users_cart = TRUE;
          break;
        }
      }
      if (!$in_users_cart) {
        $in_a_cart = db_select('tmgmt_job_item','tji')
          ->fields('tji', array('tjiid'))
          ->condition('item_type', 'node')
          ->condition('item_id', $form['#node']->nid)
          ->condition('merged', NULL)
          ->condition('tjid', 0)
          ->execute()->rowCount();
        if ($in_a_cart) {
          drupal_set_message('This node is in another user\'s translation cart.', 'warning');
        }
      }
    }

  }
  if (isset($form['field_tags']['und']['#options'])) {
    // $form_id has the following template <machine_name>_node_form
    $machine_name = substr($form_id, 0, -strlen('_node_form'));
    // $options contains options as $key => $name
    $options = $form['field_tags']['und']['#options'];
    unset($options['_none']);
    // tids of terms from select list
    $tids = array_keys($options);
    $terms = taxonomy_term_load_multiple($tids);
    foreach ($terms as $tid => $term) {
      if (!empty($term->field_excluded_from)) {
        $excluded_from = array_map(function($a) {
          return $a['value'];
        }, $term->field_excluded_from['und']);
        if (in_array($machine_name, $excluded_from)) {
          unset($form['field_tags']['und']['#options'][$tid]);
        }
      }
    }
  }
  // CW-931 Hide character count and page count
  if (isset($form_state['field']['field_page_count'])) {
    $form['field_page_count']['#access'] = FALSE;
  }
  if (isset($form_state['field']['field_character_count'])) {
    $form['field_character_count']['#access'] = FALSE;
  }

  if (!in_array('administrator', $user->roles)) {
    $form['field_archived']['#access'] = FALSE;
  }

  if (isset($form['type']) && ($form['type']['#value']=='dangerous_substances')) {
  } else {
    // Hide Delete button for all roles
    unset($form['actions']['delete']);
  }
}

/**
 * MC-151: cannot save the same node in different tabs.
 *
 * Set the "changed" value to current time so that (node_last_changed($node->nid) > $node->changed) validation
 * within node.module will not fail.
 */
function osha_node_validate_prepare($form, &$form_state) {
  $node = &$form_state['node'];
  if (isset($node->nid) && (node_last_changed($node->nid) > $node->changed)) {
    $node = node_load($node->nid);
    $form_state['values']['changed'] = time();
  }
}

function osha_wysiwyg_editor_settings_alter(&$settings, $context){
  $settings['theme_advanced_buttons1'] .= ',osha_advanced,osha_minimal';
}

/**
 * Implements hook_wysiwyg_plugin().
 */
function osha_wysiwyg_plugin($editor, $version=0) {
  static $integrated = array();

  /*
  $plugins['imce_image'] = array(
    'extensions' => array('imce_image' => t('IMCE image 2')),
    'url' => 'http://drupal.org/project/imce_image',
    'options' => array(
      'file_browser_callback' => 'imceImageBrowserImage',
      'inline_styles' => TRUE,
    ),
    'load' => FALSE,
    //'internal' => FALSE,
  );

  $plugins['imce_file'] = array(
    'extensions' => array('imce_file' => t('IMCE file 2')),
    'url' => 'http://drupal.org/project/imce_file',
    'options' => array(
      'file_browser_callback' => 'imceImageBrowserFile',
      'inline_styles' => TRUE,
    ),
    'load' => FALSE,
    //'internal' => FALSE,
  );
  return $plugins;*/

  $plugins = [];
  switch ($editor) {
  case 'tinymce':
    $plugins['osha_advanced'] = array(
      'extensions' => array(
        'osha_advanced' => t('Osha advanced selector'),
        'osha_minimal' => t('Osha minimal selector'),
      ),
      'load' => TRUE,
      'internal' => FALSE,
    );


    if (!module_invoke('imce', 'access')) {
      return $plugins;
    }

    // Add the edw_helper library for the editor.
    //  drupal_add_library('edw_helper', $editor);

    // Load our invocation scripts.
    if (empty($integrated)) {
      $path = drupal_get_path('module', 'osha');
      drupal_add_js($path . '/js/osha_imce_wysiwyg.js');
    }

    if (!isset($integrated[$editor])) {
      $integrated[$editor] = TRUE;
      // @todo If some other editor also needs the URL to be passed via
      //   Drupal.settings.imce, then we need another sub-key '$editor'.
      $settings = array(
        'osha_imce' => array(
          'files_url' => url('imce_files', array('query' => array('app' => $editor . '|url@'))),//'mode' => 'files',
          'images_url' => url('imce_images', array('query' => array('app' => $editor . '|url@'))),//'mode' => 'images',
        ),
      );
      drupal_add_js($settings, 'setting');
    }

    // TinyMCE needs to know the filename.
    $plugins['osha_image'] = array(
      'path' => drupal_get_path('module', 'osha') . '/editors/' . $editor,
      'buttons' => array('osha_image' => t('Osha image')),
      'load' => TRUE,
      'options' => array(
        'inline_styles' => TRUE,
      ),
      'filename' => 'editor_plugin_image.js',
    );
    $plugins['osha_file'] = array(
      'path' => drupal_get_path('module', 'osha') . '/editors/' . $editor,
      'buttons' => array('osha_file' => t('Osha file')),
      'load' => TRUE,
      'options' => array(
        'inline_styles' => TRUE,
      ),
      'filename' => 'editor_plugin_file.js',
    );

    break;
  }
  return $plugins;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Hide Delete button for non-admin users
 */
function osha_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  osha_form_text_fields_placeholders($form, $form_id);
  drupal_add_css(drupal_get_path('module', 'osha') . '/styles/tinymce.css');

  if ($form_id == 'field_collection_item_delete_confirm') {
    drupal_set_title(t('Are you sure you want to delete the record?', array()), PASS_THROUGH);
  }

  if($form_id == 'views_form_administration_content_main_page' &&
    !in_array('administrator', $user->roles)){
    $form_state['build_info']['args'][0]->field = array();
    $form['views_bulk_operations'] = FALSE;
  } else if ($form_id == 'lang_dropdown_form') {
    $form['lang_dropdown_select']['#attributes']['accesskey'] = '8';
  } else if ($form_id == 'search_block_form') {
    $form['search_block_form']['#attributes']['accesskey'] = '4';
  }

  // Change cardinality (one value) for activity field
  if(in_array($form['#form_id'],
    array(
      'blog_node_form',
      'article_node_form',
      'page_node_form',
      'calls_node_form',
      'directive_node_form',
      'guideline_node_form',
      'highlight_node_form',
      'infographic_node_form',
      'job_vacancies_node_form',
      'news_node_form',
      'press_release_node_form',
      'publication_node_form',
      'seminar_node_form'))) {
    $form['field_activity']['und']['#cardinality'] = 1;
    $form['field_activity']['und']['#multiple'] = FALSE;
    $form['field_activity']['und']['#empty_option'] = 'Select activity';
    $form['field_activity']['und']['#empty_value'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Order the dropdown options for language list
 */
function osha_form_lang_dropdown_form_alter(&$form, &$form_state, $form_id){
  $options_lang = $form['lang_dropdown_select']['#options'];
  $form['lang_dropdown_select']['#options'] = array_intersect_key(
    osha_sort_language_list($options_lang), osha_language_list_options());
  $form['lang_dropdown_select']['#prefix'] =
    '<label for="'.$form['lang_dropdown_select']['#attributes']['id'].
    '" style="position: absolute;left: -9999px">'.t('Language').'</label>';
  $form['lang_dropdown_select']['#attributes']['title'] = t('Language');
}

/**
 * Implements hook_date_field_formatter_settings_form_alter().
 *
 * Enable drop down for date formatter settings to chose a template.
 */
function osha_date_field_formatter_settings_form_alter(&$form, &$form_state, $context) {
  $instance = $context['instance'];
  $view_mode = $context['view_mode'];
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $formatter = $display['type'];
  if ($formatter == 'date_default') {
    $form['osha_date_theme'] = array(
      '#title' => t('Theme:'),
      '#type' => 'select',
      '#options' => array(
        '' => t('Default'),
        'calendar' => t('Calendar page')),
      '#default_value' => $settings['osha_date_theme'],
    );
  }
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function osha_field_formatter_info_alter(&$info) {
  if (isset($info['date_default'])) {
    $info['date_default']['settings'] += array('osha_date_theme' => '');
  }
}

/**
 * Implements hook_date_field_formatter_settings_summary_alter().
 */
function osha_date_field_formatter_settings_summary_alter(&$summary, $context) {
  $instance = $context['instance'];
  $view_mode = $context['view_mode'];
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  if (isset($settings['osha_date_theme'])) {
    $summary[] = t('Show using theme @theme', array('@theme' => $settings['osha_date_theme']));
  }
}

/**
 * Implements hook_theme().
 */
function osha_theme() {
  return array(
    'osha_share_widget' => array(
      'variables' => array(
        'url' => '', // Page URL
        'node' => array(), // Current node
        'tweet_url' => '',
        'language' => '', // Current language
        'options' => array(), // Additional configuration options
      ),
      'template' => 'templates/share_widget',
    ),
    'osha_share_popup' => array(
      'variables' => array(
        'node' => array(), // Current node
        'widget' => '',
      ),
      'template' => 'templates/share_popup',
    ),
  );
}

function osha_share_widget($node, $options = array()) {
  global $language;
  /** @var stdClass $wrapper */
  $type = 'other';
  if (!empty($options['page']) && $options['page'] === TRUE) {
    $url = url(current_path(), array('absolute' => TRUE));
    $title = drupal_get_title();
  }
  else {
    $url = url('node/' . $node->nid, array('absolute' => TRUE));
    $title = $node->title;
    $type = $node->type;
  }
  // Add services javascript.
  $site_name = variable_get('site_name', '');
  // Construct the tweet.
  $twitter_text = $title . ' | ' . $site_name;
  $tweet_url = url('https://twitter.com/intent/tweet', array(
    'query' => array(
      'original_referer' => $url,
      'text' => $twitter_text,
      'url' => shorten_url($url),
    ),
  ));
  $vars = array(
    'url' => $url,
    'tweet_url' => $tweet_url,
    'node' => $node,
    'language' => $language,
    'options' => $options,
    'label' => t('Share this on'),
    'type' => $type,
  );

  // Merge default vars with ones from options.
  $vars = $options + $vars;
  return theme('osha_share_widget', $vars);
}

function osha_share_popup($node, $options = array()) {
  $options['label'] = '';
  $vars = [
    'node' => $node,
    'widget' => osha_share_widget($node, $options),
  ];
  return theme('osha_share_popup', $vars);
}


/**
 * Implements hook_node_view().
 *
 * {@inheritdoc}
 */
function osha_node_view($node, $view_mode, $langcode) {
  $pos = strpos(request_uri(), '/rss-feeds');
  // URL can be with or without language
  if ( $pos === 0 || $pos === 3) {
    // CW-1849 Add tracking parameter to rss links
    /*$node->link = url($node->link, array('query' => array('pk_campaign' => 'rss_'.$node->type) , 'absolute'=>TRUE));
    $node->content['title_field'][0]['#markup'] = l('<h1>'.$node->title.'</h1>', $node->link, array('html' => TRUE));
    */
    // CW-1910 Alter pubDate, default = $node->created, replace with field_publication_date
    if (isset($node->field_publication_date[LANGUAGE_NONE][0]['value'])) {
      foreach ($node->rss_elements as $idx => $rss_element) {
        if ($rss_element['key'] == 'pubDate') {
          $node->rss_elements[$idx]['value'] = gmdate('r', strtotime($node->field_publication_date[LANGUAGE_NONE][0]['value']));
        } else if ($rss_element['key'] == 'dc:creator') {
          $node->rss_elements[$idx]['value'] = 'EU-OSHA';
        }
      }
    }
  }

  if ($node->type == 'article') {
    $node->article_type_code = FALSE;
    if (!empty($node->field_article_type[LANGUAGE_NONE][0]['tid'])) {
      $term = taxonomy_term_load($node->field_article_type[LANGUAGE_NONE][0]['tid']);
      $node->article_type_code = $term->field_article_type_code[LANGUAGE_NONE][0]['value'];
    }
  }

  // For webform content type - hide introduction field in Preview Mode
  if ($node->type == 'webform') {
    if (isset($node->content['webform']['#form']['preview'])) {
      unset($node->content['field_page_introduction']);
    }
  }

  if ($view_mode != 'full' && $node->type != 'publication') {
    // see osha_publication_field_formatter_view : publication_title_linked
    if (!empty($node->field_archived[LANGUAGE_NONE][0]['value'])) {
      if (!empty($node->content['title_field'][0]['#markup'])) {
        $node->content['title_field'][0]['#markup'] .= '<span class="title-archived">' . t('Archived') . '</span>';
      }
    }
  }

  // Load in node links the share buttons.
  $share_links_bundles = array('article', 'blog', 'dvs_survey', 'events', 'highlight', 'news', 'press_release');
  if ($view_mode == 'full' && in_array($node->type, $share_links_bundles)) {
    $node->content['links']['osha_share']['#markup'] = osha_share_widget($node);
  }

  if (!empty($_GET['action']) && $_GET['action'] == 'share') {
    $node->content['node_share_popup'] = ['#markup' => osha_share_popup($node)];
  }
}

/**
 * Implements hook_file_view().
 */
function osha_file_view($file, $view_mode, $langcode) {
  // Serve File  directly, not file entity view
  // For requests with /view skip this.
  if (!in_array('view', arg()) && $view_mode == 'full') {
    if ($view_mode == 'full') {
      $headers = array(
        'Content-Type'              => $file->filemime,
        'Content-Disposition'       => 'filename="' . drupal_basename($file->uri) . '"',
        'Content-Length'            => $file->filesize,
        'Content-Transfer-Encoding' => 'binary',
        'Pragma'                    => 'no-cache',
        'Cache-Control'             => 'must-revalidate, post-check=0, pre-check=0',
        'Expires'                   => '0',
        'Accept-Ranges'             => 'bytes',
      );
      file_transfer($file->uri, $headers);
    }
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function osha_url_outbound_alter(&$path, $original_path, $path_language) {
  // CW-1899: use the English url_alias when node is not translated
  if (strpos($path, 'node/') === 0) {
    $en_path_alias = drupal_lookup_path('alias', $path, 'en');
    if ($en_path_alias) {
      $path = $en_path_alias;
    }
  } else if (strpos($path, 'entity-collection/') === 0) {
    $eid = substr($path, 18);
    if ($eid && is_numeric($eid)) {
      $entity_collection = entity_load_single('entity_collection', $eid);
      if ($entity_collection) {
        $path = 'entity-collection/'.$entity_collection->name;
      }
    }
  }
  return;
}

/**
 * Implements hook_url_inbound_alter().
 */
function osha_url_inbound_alter(&$path, $original_path, $path_language) {
  // CW-271 - pages with english alias that are requested in other languages
  // should point to english version, not to 404.
  $orig_path_source = drupal_lookup_path('source', $original_path);
  $orig_path_alias = drupal_lookup_path('alias', $original_path);
  if (empty($orig_path_source) && empty($orig_path_alias)) {
    $source_en = drupal_lookup_path('source', $original_path, 'en');
    if (!empty($source_en)) {
      $path = $source_en;
      return;
    }
  }
  // For images, in migrated content there are images with alias appended
  // with /image_preview - for those, system should serve the image directly.
  $args = arg();
  if (end($args) == 'image_preview') {
    // If path exists, don't do anything.
    if (empty($orig_path_alias) && empty($orig_path_source)) {
      $url = preg_replace('/\/image_preview/', '', $original_path);
      $path_source = osha_look_for_path_source($url);
      if (!empty($path_source)) {
        if (preg_match("/file\/[\d]{1,99}$/", $path_source)) {
          $file = menu_get_object('file', 1, $path_source);
          if ($file->type == 'image') {
            $path = $path_source;
          }
        }
      }
    }
  }
  else {
    // If the args ends with /view, system should display the File Entity.
    if (end($args) == 'view') {
      // If path exists, don't do anything.
      if (empty($orig_path_alias) && empty($orig_path_source)) {
        $url = preg_replace('/\/view/', '', $original_path);
        $path_source = osha_look_for_path_source($url);
        if (!empty($path_source)) {
          if (preg_match("/file\/[\d]{1,99}$/", $path_source)) {
            $file = menu_get_object('file', 1, $path_source);
            // Append /view to be used in hook_file_view.
            $path = $path_source . '/view';
          }
        }
      }
    }
  }
}

/**
 * Returns the system path of an url (if path or redirect or system path).
 */
function osha_look_for_path_source($url) {
  $path_source = drupal_lookup_path('source', $url);
  // If source empty, the url might be the system path, not alias.
  if (empty($path_source) && drupal_valid_path($url)) {
    $path_source = $url;
    $path_alias = path_load($path_source);
    // If not alias and not system path, might be a redirect.
    if (empty($path_alias)) {
      $redirects = redirect_load_by_source($url, LANGUAGE_NONE);
      if (!empty($redirects)) {
        $redirect = is_array($redirects) ? current($redirects) : $redirects;
        $path_alias = array('source' => $redirect->redirect);
      }
    }
    // If alias or redirect, get the source path.
    if (!empty($path_alias)) {
      $path_source = $path_alias['source'];
    }
  }
  return $path_source;
}

/**
 * Implements hook_countries_alter().
 */
function osha_countries_alter(&$countries) {
  // EU accepts UK instead of GB.
  $countries['UK'] = 'United Kingdom';
  unset($countries['GB']);
}

/**
 * Implements hook_library_alter().
 */
function osha_library_alter(&$libraries, $module) {
  if ($module == 'chosen') {
    if (!empty($libraries['drupal.chosen']['js'][0]['data']['chosen']['options'])) {
      $options = &$libraries['drupal.chosen']['js'][0]['data']['chosen']['options'];
      // Pass trough t() the palceholders.
      $options['placeholder_text_multiple'] = t($options['placeholder_text_multiple']);
      $options['placeholder_text_single'] = t($options['placeholder_text_single']);
      $options['no_results_text'] = t($options['no_results_text']);
    }
  }
}

/**
 * Implements hook_date_formatter_dates_alter().
 */
function osha_date_formatter_dates_alter(&$dates, $context) {
  if (!empty($dates['value'])) {
    $dates['value']['osha_date_theme'] = $context['display']['settings']['osha_date_theme'];
  }
}

/**
 * Implements hook_tokens_alter().
 */
function osha_tokens_alter(array &$replacements, array $context) {
  // translate only site:name
  if (isset($replacements['[site:name]'])) {
    if (isset($context['options']['language'])) {
      $language_code = $context['options']['language']->language;
    } else {
      global $language;
      $language_code = $language->language;
    }
    $replacements['[site:name]'] = t($replacements['[site:name]'], array(), array('langcode' => $language_code));
  }
}

/**
 * Retrieve the decoded name for Activity field attached to a node.
 *
 * @param object $node
 *   Node to get data
 *
 * @return string
 *   The name of the activity or empty string
 */
function osha_node_activity_name($node) {
  if (isset($node->field_activity[LANGUAGE_NONE][0])) {
    $tid = $node->field_activity[LANGUAGE_NONE][0]['tid'];
    $term = taxonomy_term_load($tid);
    $value = field_get_items('taxonomy_term', $term, 'name_field');
    if (!empty($value)) {
      return $value[0]['safe_value'];
    }
  }
  return '';
}

function osha_user_profile_form_redirect_profile($form, &$form_state) {
  global $user;
  $form_state['redirect'] = 'user/' . $user->uid;
  drupal_redirect_form($form_state);
}

/**
 * Implments hook_form_FORM_ID_alter().
 */
function osha_form_user_profile_form_alter(&$form, $form_state) {
  if (isset($_REQUEST['pass-reset-token'])) {
    $form['#submit'][] = 'osha_user_profile_form_redirect_profile';
  }
}

/**
 * Export node to JSON.
 *
 * @param $node
 */
function osha_export_node($node) {
  if ($node->status == 0) {
    drupal_access_denied();
  }
  header('Content-type: application/javascript; charset=utf-8');
  $fields = field_info_instances('node', $node->type);
  $w = entity_metadata_wrapper('node', $node);
  $node->path = path_load('node/' . $node->nid);
  foreach(array_keys($fields) as $field_name) {
    $info = field_info_field($field_name);

    if ($info['type'] == 'field_collection') {
      $node->$field_name = $w->$field_name->value();

      $collection_fields = field_info_instances('field_collection_item', $info['field_name']);
      foreach($node->$field_name as &$field_collection_item) {
        $cw = entity_metadata_wrapper('field_collection_item', $field_collection_item);
        foreach(array_keys($collection_fields) as $collection_field_name) {
          $collection_info = field_info_field($collection_field_name);
          if ($collection_info['type'] == 'taxonomy_term_reference') {
            $field_collection_item->$collection_field_name = $cw->$collection_field_name->value();
          }
        }
      }
    }

    if ($info['type'] == 'taxonomy_term_reference') {
      $node->$field_name = $w->$field_name->value();
    }
  }
  // Change relative links to absolute.
  if (function_exists('_pathologic_filter')) {
    if (!empty($node->body)) {
      foreach ($node->body as $lng => $body) {
        $filter = filter_format_load('pathologic');
        $node->body[$lng][0]['value'] = _pathologic_filter($node->body[$lng][0]['value'], $filter, 'full_html', $lng, NULL, NULL);
      }
    }
    if (!empty($node->field_summary)) {
      foreach ($node->field_summary as $lng => $body) {
        $filter = filter_format_load('pathologic');
        $node->field_summary[$lng][0]['value'] = _pathologic_filter($node->field_summary[$lng][0]['value'], $filter, 'full_html', $lng, NULL, NULL);
      }
    }
  }
  // For press contacts with tid 2969 (type press contact) - add the nodqueue order.
  if ($node->type == 'press_contact'
    && !empty($node->field_contact_type)
    && $w->field_contact_type->value()[0]->tid == 2969) {
    $order = nodequeue_queue_position(5, $node->nid);
    $node->nodequeue_order = $order;
  }
  $export = json_encode($node, JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE);
  print $export;
  drupal_exit();
}

/**
 * Export taxonomy_term to JSON.
 *
 * @param $term
 */
function osha_export_taxonomy_term($term) {
  header('Content-type: application/javascript; charset=utf-8');
  $fields = field_info_instances('taxonomy_term', $term->vocabulary_machine_name);
  $w = entity_metadata_wrapper('taxonomy_term', $term);
  $term->path = path_load('taxonomy/term/' . $term->nid);
  foreach(array_keys($fields) as $field_name) {
    $info = field_info_field($field_name);
    if ($info['type'] == 'taxonomy_term_reference') {
      $term->$field_name = $w->$field_name->value();
    }
  }
  $export = json_encode($term, JSON_PRETTY_PRINT|JSON_UNESCAPED_UNICODE);
  print $export;
  drupal_exit();
}

function osha_expire_node_page($node) {
  $node_url = 'node/' . $node->nid;
  $paths = array('/' . $node_url);

  // Translations
  $handler = entity_translation_get_handler('node', $node);
  $translations = $handler->getTranslations();
  if (!empty($translations->data) && is_array($translations->data)) {
    foreach ($translations->data as $language => $t) {
      $paths[] = '/' . $language . '/node/' . $node->nid;
    }
  }

  // Redirects
  $redirects = db_select('redirect')->fields(NULL, array('rid', 'source', 'language'))->condition('redirect', $node_url)->execute()->fetchAllAssoc('rid');
  foreach($redirects as $row) {
    if ($row->language == LANGUAGE_NONE) {
      $url = '/' . $row->source;
    }
    else {
      $url = '/' . $row->source . '/' . $row->source;
    }
    $paths[] = $url;
  }

  // Aliases
  $aliases = db_select('url_alias')->fields(NULL, array('pid', 'alias', 'language'))->condition('source', $node_url)->execute()->fetchAllAssoc('pid');
  foreach($aliases as $row) {
    if ($row->language == LANGUAGE_NONE) {
      $url = '/' . $row->alias;
    }
    else {
      $url = '/' . $row->language . '/' . $row->alias;
    }
    $paths[] = $url;
  }
  if (!empty($paths)) {
    foreach($paths as $path) {
      osha_expire_page($path);
    }
  }
}

/**
 * Expire a single path pattern from DrupalDatabaseCache and Varnish.
 *
 * @param string $path
 *   Absolute path (ex. path/to/view) - no prefix slash!
 */
function osha_expire_view_page($path) {
  if (module_exists('varnish')) {
    global $base_root;
    $host = _varnish_get_host();
    /* Explicit expire of affected pages in cache_page */
    // http://my.domain.com/LANG/path/to/page
    foreach(language_list() as $language => $ob) {
      cache_clear_all($base_root . '/' . $language . '/' . $path, 'cache_page');
    }
    // path/to/page
    varnish_purge($host, $path);
  }
}

/**
 * Expire a single path pattern from DrupalDatabaseCache and Varnish.
 *
 * @param string $path
 *   Absolute path (ex. /fr/node/1234)
 */
function osha_expire_page($path) {
  if (module_exists('varnish')) {
    global $base_root;
    $host = _varnish_get_host();
    /* Explicit expire of affected pages in cache_page */
    // http://my.domain.com/path/to/page
    cache_clear_all($base_root . $path, 'cache_page');
    // /path/to/page
    varnish_purge($host, $path);
  }
}

/**
 * Implements hook_pathologic_alter().
 *
 * Some links such as FOP, are starting with fop/ and do need to be "fixed"
 * due to HTTP server redirects.
 */
function osha_pathologic_alter(&$url_params, $parts, $settings) {
  if (preg_match('/^fop\//m', $url_params['path'])) {
    $url_params['options']['use_original'] = TRUE;
  }
}

/**
 * Implements hook_page_build().
 */
function osha_page_build(&$page) {
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', 'osha') . '/styles/osha_admin.css', array('group' => CSS_THEME));
  }
}

/**
 * Add alt and title attributes to images thumbnails
 */
function osha_thumbnail_alt_title(&$build, $content_type, $field, $formatter){
  $current_language = 'en';

  if($build['#bundle'] == $content_type){
    if(isset($build[$field]) && $build[$field]['#formatter'] == $formatter){
      foreach($build[$field] as $key => $image){
        if(is_array($image) && isset($image['#item'])){
          if(isset($build['#node']->title_field[$build['#language']][0]['value'])){
            $current_language = $build['#language'];
          }
          $build[$field][$key]['#item']['alt'] = $build['#node']->title_field[$current_language][0]['value'];
          $build[$field][$key]['#item']['title'] = $build['#node']->title_field[$current_language][0]['value'];
        }
      }
    }
  }
}

/**
 * Redirect the user to node edit form. We open other languages from javascript.
 */
function osha_open_all_node_translations($node) {
  drupal_goto(
    'node/' . $node->nid . '/edit',
    array('language' => reset(array_keys($node->translations->data)))
  );
}

/**
 * Redirect the user to first translation. We open other languages from javascript.
 */
function osha_view_all_node_translations($node) {
  $url = $node->type == 'publication' ? drupal_get_path_alias('node/' . $node->nid) . '/view' : 'node/' . $node->nid;
  drupal_goto(
    $url,
    array('language' => reset(array_keys($node->translations->data)))
  );
}

function osha_form_text_fields_placeholders(&$form, $form_id) {
  if (strpos($form_id, '_node_form') && isset($form['title'])) {
    $form['#after_build'][] = 'osha_form_text_fields_placeholders_after_build';
  }
}

function osha_form_text_fields_placeholders_after_build($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'osha') . '/js/jquery.charactersRemaining.js');
  drupal_add_js(drupal_get_path('module', 'osha') . '/js/charactersRemaining.js', array('scope' => 'footer'));
  return $form;
}

function osha_imce_scan_directory($dirname, $imce) {

  $files_only = (arg(0) == 'imce_files') ? TRUE : NULL;
  $images_only = (arg(0) == 'imce_images') ? TRUE : NULL;

  $directory = array('dirsize' => 0, 'files' => array(), 'subdirectories' => array(), 'error' => FALSE);
  $diruri = imce_dir_uri($imce, $dirname);

  if (!is_string($dirname) || $dirname == '' || !$handle = opendir($diruri)) {
    imce_inaccessible_directory($dirname, $imce);
    $directory['error'] = TRUE;
    return $directory;
  }

  while (($file = readdir($handle)) !== FALSE) {

    // Do not include dot files and folders
    if (substr($file, 0, 1) === '.') {
      continue;
    }

    $path = $diruri . $file;

    if (is_dir($path)) {
      $directory['subdirectories'][] = $file;
      continue;
    }

    $width = $height = 0;
    if ($img = imce_image_info($path)) {
      $width = $img['width'];
      $height = $img['height'];
    }
    if ($images_only && (!$width || !$height)) {
      continue;
    }
    if ($files_only && ($width || $height)) {
      continue;
    }
    $size = filesize($path);
    $date = filemtime($path);
    $directory['files'][$file] = array(
      'name' => $file,
      'size' => $size,
      'width' => $width,
      'height' => $height,
      'date' => $date
    );
    $directory['dirsize'] += $size;
  }

  closedir($handle);
  sort($directory['subdirectories']);
  return $directory;
}

function osha_imce_custom_content($imce) {
  if (arg(0) == 'imce_files') {
    $path = drupal_get_path('module', 'osha');
    drupal_add_js($path . '/js/imce_file.js');
  }
}

function osha_imce_custom_init($imce, $user) {
  if (isset($_REQUEST['url'])) {
    $url = pathinfo($_REQUEST['url'],PATHINFO_DIRNAME);
    $public_path = parse_url(file_create_url('public://'),PHP_URL_PATH);
    if (strpos($url, $public_path) === 0) {
      $dir = str_replace($public_path, '', $url);
      $sess = TRUE;
      if (count($imce['directories']) < 2) {
        $perms = reset($imce['directories']);
        if (!isset($perms['subnav']) || !$perms['subnav']) {
          $sess = FALSE;
        }
      }
      if (isset($dir)) {
        if (imce_check_directory($dir, $imce)) {
          if ($sess) {
            $_SESSION['imce_directory'] = rawurlencode($dir);
          }
        }
      }
    }
  }
}