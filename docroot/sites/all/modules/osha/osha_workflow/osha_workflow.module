<?php
/**
 * @file
 * Code for the Osha Workflow feature.
 */

include_once 'osha_workflow.features.inc';
include_once 'osha_workflow.api.inc';
include_once 'osha_workflow.review_manager.inc';
include_once 'osha_workflow.pm.inc';

/* Publishing workflow roles */
define('OSHA_WORKFLOW_ROLE_EDITOR', 'Editor');
define('OSHA_WORKFLOW_ROLE_REVIEW_MANAGER', 'Review Manager');
define('OSHA_WORKFLOW_ROLE_PROJECT_MANAGER', 'Project Manager');
define('OSHA_WORKFLOW_ROLE_APPROVER', 'Approver');
define('OSHA_WORKFLOW_ROLE_EVENTS_COORDINATOR', 'Events Coordinator');
define('OSHA_WORKFLOW_ROLE_EVENTS_EDITOR', 'Events Editor');
/* Translation workflow roles */
define('OSHA_WORKFLOW_ROLE_TRANSLATION_MANAGER', 'Translation Manager');
define('OSHA_WORKFLOW_ROLE_TRANSLATION_LIAISON', 'Translation Liaison');
define('OSHA_WORKFLOW_ROLE_LAYOUT_VALIDATOR', 'Layout Validator');
define('OSHA_WORKFLOW_ROLE_CONTENT_VALIDATOR', 'Content Validator');
/* Drupal administrator role */
define('OSHA_WORKFLOW_ROLE_ADMINISTRATOR', 'administrator');

/* Workflow states */
define('OSHA_WORKFLOW_STATE_DRAFT', 'draft');
define('OSHA_WORKFLOW_STATE_FINAL_DRAFT', 'final_draft');
define('OSHA_WORKFLOW_STATE_REJECTED', 'rejected');
define('OSHA_WORKFLOW_STATE_APPROVED', 'approved');
define('OSHA_WORKFLOW_STATE_TO_BE_REVIEWED', 'needs_review');
define('OSHA_WORKFLOW_STATE_TO_BE_APPROVED', 'to_be_approved');
define('OSHA_WORKFLOW_STATE_READY_TO_PUBLISH', 'ready_to_publish');
define('OSHA_WORKFLOW_STATE_PUBLISHED', 'published');

/**
 * Implements hook_token_info().
 */
function osha_workflow_token_info() {
  $info['tokens']['node']['node-translate'] = array(
    'name' => t('node translate url'),
    'description' => t('Node translate url.'),
    'type' => 'array',
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function osha_workflow_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  // Node tokens.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'node-translate':
          $url_options['absolute'] = TRUE;
          $replacements[$original] = url('node/' . $node->nid . '/translate', $url_options);
          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_menu().
 *
 * @codeCoverageIgnore
 */
function osha_workflow_menu() {
  $items = array();
  $items['admin/config/workbench/access/managers'] = array(
    'title' => 'Project Managers',
    'description' => 'Assignment of project managers for each website section.',
    'page callback' => 'osha_workflow_workbench_project_managers',
    'page arguments' => array(),
    'access callback' => array('osha_workflow_user_has_role_access_callback'),
    'access arguments' => array(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, OSHA_WORKFLOW_ROLE_APPROVER),
    'type' => MENU_LOCAL_TASK,
    'weight' => -12,
    'file' => 'osha_workflow.admin.inc',
  );

  $items['admin/config/workbench/access/review-managers'] = array(
    'title' => 'Review Managers',
    'description' => 'Assignment of review managers for each website section.',
    'page callback' => 'osha_workflow_workbench_review_managers',
    'page arguments' => array(),
    'access arguments' => array('assign workbench access'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -12,
    'file' => 'osha_workflow.review_manager.inc',
  );

  $items['admin/workbench/workbench-access-pm'] = array(
    'title' => 'PM Sections',
    'description' => 'Assignment of project managers for each website section.',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/config/workbench/access/managers'),
    'access callback' => array('osha_workflow_user_has_role_access_callback'),
    'access arguments' => array(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, OSHA_WORKFLOW_ROLE_APPROVER),
    'type' => MENU_LOCAL_TASK,
    'weight' => -12,
    'file' => 'osha_workflow.admin.inc',
  );

  $items['admin/config/workbench/access/managers/review'] = array(
    'title' => 'Section Review',
    'description' => 'Mark section as Reviewed.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_access_section_review_form'),
    'access arguments' => array('view workbench access information'),
    'file' => 'osha_workflow.admin.inc',
  );

  $items['admin/config/workbench/access/approvers'] = array(
    'title' => 'Default Approvers',
    'description' => 'Define the list of default approvers',
    'page callback' => 'drupal_goto',
    'page arguments' => array('entity-collection/approvers/content'),
    'access arguments' => array('manage content in moderators_group entity collections'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -13,
  );

  $items['node/%node/approve'] = array(
    'title' => 'Approve',
    'description' => 'Approval page for the OSHA approval workflow.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_node_approval_form', 1),
    'access callback' => 'osha_workflow_node_approval_access',
    'access arguments' => array(1),
    'file' => 'osha_workflow.admin.inc',
    'weight' => 10,
  );
  $items['node/%node/review'] = array(
    'title' => 'Review',
    'description' => 'Review page for the OSHA reviewing workflow.',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('osha_workflow_node_pm_assign_form', 1),
    'access callback' => 'osha_workflow_node_review_access',
    'access arguments' => array(1),
    'file' => 'osha_workflow.pm.inc',
    'weight' => 9,
  );
  return $items;
}

function _osha_workflow_body_rows($old_node, $new_node, $state = 'raw') {
  // This is an unique index only, so no need for drupal_static().
  static $table_row_counter = 0;

  if ($theme = variable_get('diff_theme', 'default')) {
    drupal_add_css(drupal_get_path('module', 'diff') . "/css/diff.{$theme}.css");
  }
  module_load_include('inc', 'diff', 'includes/node');

  $rows = array();
  $context = array(
    'entity_type' => 'node',
    'states' => array($state),
    'view_mode' => 'diff_standard',
  );
  $node_diffs = diff_compare_entities($old_node, $new_node, $context);

  // Track line numbers between multiple diffs.
  $line_stats = array(
    'counter' => array('x' => 0, 'y' => 0),
    'offset' => array('x' => 0, 'y' => 0),
  );

  // Render diffs for each.
  foreach ($node_diffs as $node_diff) {
    $show_header = !empty($node_diff['#name']);
    // These are field level settings.
    if ($show_header && isset($node_diff['#settings']['show_header'])) {
      $show_header = $show_header && $node_diff['#settings']['show_header'];
    }

    // Line counting and line header options.
    if (empty($node_diff['#settings']['line_counter'])) {
      $line_counter = FALSE;
    }
    else {
      $line_counter = $node_diff['#settings']['line_counter'];
    }
    // Every call to 'line' resets the counters.
    if ($line_counter) {
      $line_stats['counter']['x'] = 0;
      $line_stats['counter']['y'] = 0;
      if ($line_counter == 'line' && 0) {
        $line_stats['offset']['x'] = 0;
        $line_stats['offset']['y'] = 0;
      }
      $line_stats_ref = $line_stats;
    }
    else {
      $line_stats_ref = NULL;
    }

    list($old, $new) = diff_extract_state($node_diff, $state);
    if ($node_diff_rows = diff_get_rows($old, $new, $line_counter && $line_counter != 'hidden', $line_stats_ref)) {
      if ($line_counter && $line_counter != 'line') {
        $line_stats['offset']['x'] += $line_stats_ref['counter']['x'];
        $line_stats['offset']['y'] += $line_stats_ref['counter']['y'];
      }
      if ($show_header) {
        $rows['diff-header-' . $table_row_counter++] = array(
          array(
            'data' => t('Changes to %name', array('%name' => $node_diff['#name'])),
            'class' => 'diff-section-title',
            'colspan' => 4,
          ),
        );
      }
      // To avoid passing counter to the Diff engine, index rows manually here
      // to allow modules to interact with the table. i.e. no array_merge().
      foreach ($node_diff_rows as $row) {
        $rows['diff-row-' . $table_row_counter++] = $row;
      }
    }
  }
  return $rows;
}

function osha_workflow_diffs_show($node, $old_vid, $new_vid, $state = NULL) {
  // Attaches the CSS.
  $build['#attached'] = diff_build_attachments();

  $default_state = variable_get('diff_default_state_node', 'raw');
  if (empty($state)) {
    $state = $default_state;
  }
  $state = str_replace('-', '_', $state);
  if (!array_key_exists($state, diff_available_states())) {
    $state = $default_state;
  }

  $node_revisions = node_revision_list($node);

  $old_node = node_load($node->nid, $old_vid);
  $new_node = node_load($node->nid, $new_vid);

  // Generate table header (date, username, log message).
  $old_header = t('!date by !username', array(
    '!date' => l(format_date($old_node->revision_timestamp), "node/$node->nid/revisions/$old_node->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => $node_revisions[$old_vid])),
  ));
  $new_header = t('!date by !username', array(
    '!date' => l(format_date($new_node->revision_timestamp), "node/$node->nid/revisions/$new_node->vid/view", array('absolute' => 1)),
    '!username' => theme('username', array('account' => $node_revisions[$new_vid])),
  ));

  $old_log = $old_node->log != '' ? '<p class="revision-log">' . filter_xss($old_node->log) . '</p>' : '';
  $new_log = $new_node->log != '' ? '<p class="revision-log">' . filter_xss($new_node->log) . '</p>' : '';

  $header = _diff_default_header($old_header, $new_header);
  $rows = array();
  if ($old_log || $new_log) {
    $rows['logs'] = array(
      array(
        'data' => $old_log,
        'colspan' => 2,
      ),
      array(
        'data' => $new_log,
        'colspan' => 2,
      ),
    );
  }

  $body_rows = _osha_workflow_body_rows($old_node, $new_node, $state);
  // Return if no visible changes on current langauge.
  if (!$body_rows) {
    return [];
  }
  $rows = array_merge($rows, $body_rows);

  $build['diff_table'] = array(
    '#theme' => 'table__diff__standard',
    '#header' => $header,
    '#rows' => $rows,
    '#attributes' => array('class' => array('diff')),
    '#colgroups' => _diff_default_cols(),
    '#sticky' => FALSE,
  );
  return $build;
}

/**
 * Implements hook_menu_alter().
 * @codeCoverageIgnore
 */
function osha_workflow_menu_alter(&$items) {
  // our custom hook should be called after i18n_taxonomy
  if (variable_get('page_manager_term_view_disabled', TRUE) && !module_exists('taxonomy_display')) {
    // Taxonomy term page. Localize terms.
    $items['taxonomy/term/%taxonomy_term']['page callback'] = 'osha_dangerous_substances_term_page';
    $items['taxonomy/term/%taxonomy_term']['title callback'] = 'i18n_taxonomy_term_name';
    $items['taxonomy/term/%taxonomy_term']['file'] = 'i18n_taxonomy.pages.inc';
    $items['taxonomy/term/%taxonomy_term']['file path'] = drupal_get_path('module', 'i18n_taxonomy');
  }

  // Let Administrators to see the editors screen - they don;t have permission
  // to edit them, so we overwrite this.
  $items['admin/config/workbench']['access callback'] = 'osha_workflow_user_has_role_access_callback';
  $items['admin/config/workbench/access']['access callback'] = 'osha_workflow_user_has_role_access_callback';
  $items['admin/config/workbench/access/editors']['access callback'] = 'osha_workflow_user_has_role_access_callback';
  $items['admin/config/workbench']['access arguments'] = array(OSHA_WORKFLOW_ROLE_ADMINISTRATOR);
  $items['admin/config/workbench/access']['access arguments'] = array(OSHA_WORKFLOW_ROLE_ADMINISTRATOR);
  $items['admin/config/workbench/access/editors']['access arguments'] = array(OSHA_WORKFLOW_ROLE_ADMINISTRATOR);

  // Disable Section Menu from Workbench Dashboard.
  $items['admin/workbench/sections']['access callback'] = FALSE;

  // Hide Editors tab from Workbench Access config.
  // $items['admin/config/workbench/access']['page callback'] = 'workbench_access_roles';
  // $items['admin/config/workbench/access/editors']['access callback'] = FALSE;

  $items['admin/workbench']['page callback'] = 'views_embed_view';
  $items['admin/workbench']['page arguments'] = array('osh_workflow_admin', 'my_content');
}

/**
 * Permission access to approval local task.
 *
 * @param object $node
 *   Approved node
 *
 * @return null|string
 *   Access permission to the screen.
 */
function osha_workflow_node_approval_access($node) {
  return OshaWorkflowPermissions::userCanAccessApprovalScreen($node);
}

/**
 * Permission access to review local task.
 *
 * @param object $node
 *   Reviewed node
 *
 * @return null|string
 *   Access permission to the screen.
 */
function osha_workflow_node_review_access($node) {
  if (OshaWorkflowPermissions::userCanAccessReviewScreen($node)) {
    return NODE_ACCESS_ALLOW;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_entity_info().
 *
 * @codeCoverageIgnore
 */
function osha_workflow_entity_info() {
  return array(
    'node_project_managers' => array(
      'label' => t('Node project manager'),
      'module' => 'osha_workflow',
      'controller class' => 'OshaWorkflowProjectManagerEntityController',
      'base table' => 'osha_workflow_node_project_managers',
      'entity keys' => array(
        'id' => 'npmid',
      ),
    ),
    'node_approval' => array(
      'label' => t('Node approval'),
      'module' => 'osha_workflow',
      'controller class' => 'OshaWorkflowApprovalItemController',
      'base table' => 'osha_workflow_node_approval',
      'entity keys' => array(
        'id' => 'apid',
      ),
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );
}

/**
 * Implements hook_entity_property_info().
 *
 * @codeCoverageIgnore
 */
function osha_workflow_entity_property_info() {
  $info = array();

  // Add meta-data for node_approval entity.
  $properties = &$info['node_approval']['properties'];
  $properties['user'] = array(
    'label' => t("User"),
    'type' => 'user',
    'description' => t("The User that can review the node."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['node'] = array(
    'label' => t("Node"),
    'type' => 'node',
    'description' => t("The Node that needs review."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'nid',
  );
  $properties['next'] = array(
    'label' => t("Next"),
    'type' => 'integer',
    'description' => t("If the user is next who needs to approve"),
    'getter callback' => 'entity_property_verbatim_get',
    'schema field' => 'next',
  );

  // Add meta-data for node_project_managers entity.
  $properties = &$info['node_project_managers']['properties'];
  $properties['user'] = array(
    'label' => t("User"),
    'type' => 'user',
    'description' => t("The User that is Project Manager for the node."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['node'] = array(
    'label' => t("Node"),
    'type' => 'node',
    'description' => t("The Project Manager's node."),
    'getter callback' => 'entity_metadata_node_get_properties',
    'computed' => TRUE,
    'entity views field' => TRUE,
    'required' => TRUE,
    'schema field' => 'nid',
  );

  return $info;
}

/**
 * Implements hook_permission().
 *
 * We need this to define permissions granted to content moderators.
 */
function osha_workflow_permission() {
  $permissions = array();
  // Per state permissions. Used by workbench_moderation_node_access().
  $states = workbench_moderation_states();
  foreach ($states as $state) {
    $permissions['edit any content in ' . $state->name] = array(
      'title' => t('Edit any content in @state', array('@state' => $state->label)),
    );
  }

  $permissions['view osh approver needs review tab'] = array('title' => t("View Approver's 'Needs Aproval' tab in My Workbench"));
  $permissions['view osh review manager needs review tab'] = array('title' => t("View Review Manager's 'Needs RM Review' tab in My Workbench"));
  $permissions['view osh project manager needs review tab'] = array('title' => t("View Project Manager's 'Needs PM Review' tab in My Workbench"));
  $permissions['view osh content tab'] = array('title' => t("View 'Content' tab in My Workbench"));
  $permissions['mark access section as reviewed'] = array('title' => t("Can mark as Reviewed Access section PM"));

  $permissions['assign pm to node'] = array('title' => t("Can assign PM to node"));

  return $permissions;
}

function osha_workflow_user_has_role_access_callback($role = 'OSHA_WORKFLOW_ROLE_ADMINISTRATOR', $role2 = 'OSHA_WORKFLOW_ROLE_ADMINISTRATOR') {
  global $user;
  if (OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_ADMINISTRATOR, $user)) {
    return TRUE;
  }
  return OshaWorkflowPermissions::userHasRole($role, $user) || OshaWorkflowPermissions::userHasRole($role2, $user);
}

/**
 * Implements hook_node_access().
 *
 * {@inheritdoc}
 * @see http://openmonkey.blogspot.ro/2011/10/add-permissions-to-workbench-moderation.html
 */
function osha_workflow_node_access($node, $operation, $user) {
  if (OshaWorkflowPermissions::userIsAdministrator($user)) {
    return NODE_ACCESS_IGNORE;
  }
  if ($operation == 'view') {
    return NODE_ACCESS_IGNORE;
  }

  $is_approver = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_APPROVER, $user);
  $is_events_coordinator = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_EVENTS_COORDINATOR, $user);
  $is_events_editor = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_EVENTS_EDITOR, $user);

  $is_rm = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_REVIEW_MANAGER, $user);
  $is_pm = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, $user);
  $is_editor = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_EDITOR, $user);

  /* Global whitelist independend of create/update */
  // If is not Editor/PM/RM leave permissions to Drupal
  if (!$is_editor && !$is_rm && !$is_pm && !$is_approver) {
    return NODE_ACCESS_IGNORE;
  }
  // Event editors can add any event.
  if ($node == 'events' && ($is_events_editor || $is_events_coordinator)) {
    return NODE_ACCESS_IGNORE;
  }

  // On creation.
  if ($operation == 'create') {
    // When $operation is 'create', $node is actually the bundle (i.e. "news").
    $bundle_in_rm_section = osha_workflow_bundle_in_rm_section($node, $user);
    $bundle_in_editor_section = osha_workflow_bundle_in_editor_section($node, $user);
    $bundle_in_pm_section = osha_workflow_bundle_in_pm_section($node, $user);

    /* Editor role */
    // Editors are allowed to edit the content in their own section
    if ($is_editor && $bundle_in_editor_section) {
      return NODE_ACCESS_IGNORE;
    }

    /* Review manager */
    // Allow Review manager to moderate content in their own section
    if ($is_rm && $bundle_in_rm_section) {
      return NODE_ACCESS_IGNORE;
    }

    /* Project manager */
    // Allow Review manager to moderate content in their own section
    if ($is_pm && $bundle_in_pm_section) {
      return NODE_ACCESS_IGNORE;
    }
  }

  // For editing..
  if ($operation == 'update') {
    $node_in_rm_section = osha_workflow_node_in_rm_section($node, $user);
    $node_in_editor_section = osha_workflow_node_in_editor_section($node, $user);
    $node_in_pm_section = osha_workflow_node_in_pm_section($node, $user);


    // Assuming if not moderated, no workbench access restrictions apply
    // @todo: can have workbench_access but without moderation?
    if (!isset($node->workbench_moderation) || !isset($node->workbench_access)) {
      return NODE_ACCESS_IGNORE;
    }

    $state = $node->workbench_moderation['current']->state;
    // Deny access if @todo
    if ($state && variable_get('workbench_moderation_per_node_type', FALSE) && !user_access('edit any content in ' . $state, $user)) {
      return NODE_ACCESS_DENY;
    }

    /* Editor role */
    if($node_in_editor_section) {
      // If editor is node owner or state is published, allow further editing
      if (osha_workflow_get_node_owner($node->nid, $node->uid) == $user->uid || $state == OSHA_WORKFLOW_STATE_PUBLISHED) {
        return NODE_ACCESS_IGNORE;
      }
    }

    /* Project manager */
    // Is assigned as PM to node and node section matches one of PMs.
    if ($node_in_pm_section) {
      return NODE_ACCESS_IGNORE;
    }

    /* Review manager */
    // @todo: Allow editing in any state???
    if ($node_in_rm_section) {
      return NODE_ACCESS_IGNORE;
    }

    /* Approver (next approver) */
    if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED && osha_workflow_is_next_approver($node->nid)) {
      // Approver needs acces to edit because to add comments
      return NODE_ACCESS_IGNORE;
    }
  }

  return NODE_ACCESS_DENY;
}


function osha_workflow_user_has_access_to_node_section($node, $user) {
  $users_sections = osha_workflow_user_get_all_sections($user);
  if (!isset($node->workbench_access) || in_array('section', $users_sections)) {
    return TRUE;
  }

  if (!osha_workflow_node_section_access_rm($node, $user)) {
    return NODE_ACCESS_DENY;
  }

  if (!osha_workflow_node_section_access_pm($node, $user)) {
    return NODE_ACCESS_DENY;
  }

  $common_sections = array_intersect($users_sections, $node->workbench_access);
  if (!empty($common_sections)) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Check if a user belongs to a section mapped with bundle.
 *
 * TRUE for unmapped bundles.
 */
function osha_workflow_user_has_access_to_bundle($bundle, $user) {
  $users_sections = osha_workflow_user_get_all_sections($user);
  // If assigned to root, can edit anything.
  if (in_array('section', $users_sections)) {
    return TRUE;
  }
  $bundle_section_map = osha_workflow_bundle_section_map();
  if (!empty($bundle_section_map[$bundle])) {
    // Check if the bundle is in user's sections.
    $term = osha_workflow_get_section_term_by_ldap_id($bundle_section_map[$bundle]);
    if (!empty($term)) {
      return in_array($term->tid, $users_sections);
    }
  }
  // Allow for other unmapped content types.
  return TRUE;
}

/**
 * Check if user that has RM role is assigned to
 *   section mapped with node's bundle.
 *
 * TRUE for no RM users or for unmapped bundles.
 */
function osha_workflow_node_section_access_rm($node, $user) {
  if (OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, $user)) {
    if (!osha_workflow_node_in_rm_section($node, $user)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * If node is in one of RM's section.
 *
 * TRUE for non-moderated content
 */
function osha_workflow_node_in_rm_section($node, $user) {
  $users_sections = osha_workflow_access_get_rm_sections($user->uid);
  if (!isset($node->workbench_access) || in_array('section', $users_sections)) {
    return TRUE;
  }
  $common_sections = array_intersect($users_sections, $node->workbench_access);
  if (!empty($common_sections)) {
    return TRUE;
  }
  return FALSE;
}

function osha_workflow_bundle_in_rm_section($bundle, $user) {
  $users_sections = osha_workflow_access_get_rm_sections($user->uid);
  // If assigned to root, can edit anything.
  if (in_array('section', $users_sections)) {
    return TRUE;
  }
  $bundle_section_map = osha_workflow_bundle_section_map();
  if (!empty($bundle_section_map[$bundle])) {
    // Check if the bundle is in user's sections.
    $term = osha_workflow_get_section_term_by_ldap_id($bundle_section_map[$bundle]);
    if (!empty($term)) {
      return in_array($term->tid, $users_sections);
    }
  }
  // Allow for other unmapped content types.
  return TRUE;
}

/**
 * Check if user that has PM role is assigned to
 *   section mapped with node's bundle.
 *
 * TRUE for no PM users or for unmapped bundles.
 */
function osha_workflow_node_section_access_pm($node, $user) {
  if (OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, $user)) {
    if (!osha_workflow_node_in_pm_section($node, $user)) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * If node is in one of PM's section.
 */
function osha_workflow_node_in_pm_section($node, $user) {
  $users_sections = osha_workflow_access_get_pm_sections($user->uid);
  if (!isset($node->workbench_access) || in_array('section', $users_sections)) {
    return TRUE;
  }
  $common_sections = array_intersect($users_sections, $node->workbench_access);
  if (!empty($common_sections)) {
    return TRUE;
  }
  return FALSE;
}

function osha_workflow_bundle_in_pm_section($bundle, $user) {
  $users_sections = osha_workflow_access_get_pm_sections($user->uid);
  // If assigned to root, can edit anything.
  if (in_array('section', $users_sections)) {
    return TRUE;
  }
  $bundle_section_map = osha_workflow_bundle_section_map();
  if (!empty($bundle_section_map[$bundle])) {
    // Check if the bundle is in user's sections.
    $term = osha_workflow_get_section_term_by_ldap_id($bundle_section_map[$bundle]);
    if (!empty($term)) {
      return in_array($term->tid, $users_sections);
    }
  }
  // Allow for other unmapped content types.
  return TRUE;
}

/**
 * If node is in one of Editor's section.
 */
function osha_workflow_node_in_editor_section($node, $user) {
  $wa_sections = osha_workflow_editor_get_sections($user);
  $wa_sections = array_keys($wa_sections);
  if (!isset($node->workbench_access) || in_array('section', $wa_sections)) {
    return TRUE;
  }
  $common_sections = array_intersect($wa_sections, $node->workbench_access);
  if (!empty($common_sections)) {
    return TRUE;
  }
  return FALSE;
}

function osha_workflow_bundle_in_editor_section($bundle, $user) {
  $users_sections = osha_workflow_editor_get_sections($user);
  $users_sections = array_keys($users_sections);
  // If assigned to root, can edit anything.
  if (in_array('section', $users_sections)) {
    return TRUE;
  }
  $bundle_section_map = osha_workflow_bundle_section_map();
  if (!empty($bundle_section_map[$bundle])) {
    // Check if the bundle is in user's sections.
    $term = osha_workflow_get_section_term_by_ldap_id($bundle_section_map[$bundle]);
    if (!empty($term)) {
      return in_array($term->tid, $users_sections);
    }
  }
  // Allow for other unmapped content types.
  return TRUE;
}

function osha_workflow_get_node_owner($nid, $uid = NULL) {
  $result = db_select('workbench_moderation_node_history', 'wmnh')
    ->fields('wmnh');
  $draft_to_draft = db_and()
    ->condition('from_state', OSHA_WORKFLOW_STATE_DRAFT)
    ->condition('state', OSHA_WORKFLOW_STATE_DRAFT);
  $draft_to_final = db_and()
    ->condition('from_state', OSHA_WORKFLOW_STATE_DRAFT)
    ->condition('state', OSHA_WORKFLOW_STATE_FINAL_DRAFT);
  $publ_to_draft = db_and()
    ->condition('from_state', OSHA_WORKFLOW_STATE_PUBLISHED)
    ->condition('state', OSHA_WORKFLOW_STATE_DRAFT);
  $or = db_or()
    ->condition($draft_to_draft)
    ->condition($draft_to_final)
    ->condition($publ_to_draft);
  $result->condition($or);
  $result->condition('wmnh.nid', $nid);
  $result->orderBy('hid', 'DESC');
  $result->range(0, 1);
  $result = $result->execute();
  $result = $result->fetchAllAssoc('uid');
  if (!empty($result)) {
    return current(array_keys($result));
  }
  else {
    if (!$uid) {
      $node = node_load($nid);
      $uid = $node->uid;
    }
    return $uid;
  }
}

/**
 * Implements hook_theme().
 *
 * @codeCoverageIgnore
 */
function osha_workflow_theme() {
  return array(
    'osha_workflow_approval_form' => array(
      'render element' => 'form',
      'file' => 'osha_workflow.admin.inc',
    ),
    'osha_workflow_access_pm_form' => array(
      'render element' => 'form',
      'file' => 'osha_workflow.admin.inc',
    ),
    'osha_workflow_access_rm_form' => array(
      'render element' => 'form',
      'file' => 'osha_workflow.review_manager.inc',
    ),
    'osha_workflow_node_pm_assign_form' => array(
      'render element' => 'form',
      'file' => 'osha_workflow.pm.inc',
    ),
  );
}

/**
 * Get the section term that has the LDAP section code.
 */
function osha_workflow_get_section_term_by_ldap_id($section) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', array('section'))
    ->fieldCondition('field_ldap_section_code', 'value', $section);
  $result = $query->execute();
  if (!empty($result['taxonomy_term'])) {
    $term = array_keys($result['taxonomy_term']);
    $term = taxonomy_term_load(current($term));
    return $term;
  }
  return NULL;
}

/**
 * Map bundles to sections code from ldap.
 */
function osha_workflow_bundle_section_map() {
  return array(
    'news' => 'AWRACT',
    'highlight' => 'AWRACT',
    'events' => 'AWRACT',
    'publication' => 'PUBLIC',
    'seminar' => 'SEMIN',
    'job_vacancies' => 'CAREER',
    'press_release' => 'PROOM',
    'blog' => 'BLOG',
    'directive' => 'LEGIS',
    'guideline' => 'LEGIS',
    'calls' => 'PROCUR',
    'infographic' => 'CORPCM',
    'dangerous_substances' => 'DANGSUDB',
  );
}

/**
 * Implements hook_workbench_access_node_element_alter().
 */
function osha_workflow_workbench_access_node_element_alter(&$element, $form_state, $active) {
  // Unset sections that don't belongs to the user (PM, RM, Editor).
  global $user;
  if (!OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_ADMINISTRATOR, $user)
    && (OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_EDITOR, $user)
      || OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, $user)
      || OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_REVIEW_MANAGER, $user))
  ) {
    $user_sections = osha_workflow_user_get_all_sections($user);
    foreach ($element['#options'] as $key => $option) {
      if (!in_array($key, $user_sections)) {
        unset($element['#options'][$key]);
      }
    }
  }
  // Set default value for section according to mapping.
  $node = $form_state['node'];
  $section_term = osha_workflow_get_default_section($node);
  if ($section_term && in_array($section_term->tid, array_keys($element['#options']))) {
    $element['#default_value'] = $section_term->tid;
  }
}

/**
 * Get all sections from editor, PM, and RM (screens) of the user.
 */
function osha_workflow_user_get_all_sections($user) {
  $user_sections = array();
  if (OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, $user)) {
    $user_sections = array_merge($user_sections, osha_workflow_access_get_pm_sections($user->uid));
  }
  if (OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_REVIEW_MANAGER, $user)) {
    $user_sections = array_merge($user_sections, osha_workflow_access_get_rm_sections($user->uid));
  }
  if (OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_EDITOR, $user)) {
    module_load_include('inc', 'workbench_access', 'workbench_access.tokens');
    $wa_sections = osha_workflow_editor_get_sections($user);
    $user_sections = array_merge($user_sections, array_keys($wa_sections));
  }
  // If user has root section, has all sections.
  if (in_array('section', $user_sections)) {
    $active_tree = workbench_access_get_active_tree();
    if (!empty($active_tree['tree'])) {
      $user_sections = drupal_map_assoc(array_keys($active_tree['tree']));
    }
  }
  return $user_sections;
}

/**
 * Return Editors sections.
 */
function osha_workflow_editor_get_sections($user) {
  $query = db_query(
    "SELECT access_id, access_id FROM {workbench_access_user}
     WHERE access_scheme = :access_scheme AND uid = :uid",
    array(':access_scheme' => 'taxonomy', ':uid' => $user->uid));
  return $query->fetchAllKeyed();
}

/**
 * Get the term of the default section for node.
 */
function osha_workflow_get_default_section($node) {
  $bundle_section_map = osha_workflow_bundle_section_map();
  if (empty($node->workbench_access)
    && !empty($bundle_section_map[$node->type])
    && $term = osha_workflow_get_section_term_by_ldap_id($bundle_section_map[$node->type])) {
    return $term;
  }
  return NULL;
}

/**
 * Implements hook_workbench_moderation_transition().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_transition($node, $old, $new) {
  global $language;

  // Review workflow.
  $rm_notified = FALSE;
  if ($old == OSHA_WORKFLOW_STATE_DRAFT && $new == OSHA_WORKFLOW_STATE_FINAL_DRAFT) {
    // Assign the default PM, if none assigned.
    if ($node->type != 'publication') {
      $exiting_pms_entries = osha_workflow_get_pms_entries($node->nid);
      if (empty($exiting_pms_entries)) {
        reset($node->workbench_access);
        $section = current($node->workbench_access);
        $section_pms = osha_workflow_access_get_section_pm($section);
        if (!empty($section_pms)) {
          $pms = array();
          // Order alphabetically the pms.
          foreach ($section_pms as $pm) {
            $pms[$pm->uid] = $pm->name;
          }
          asort($pms);
          $weight = 0;
          foreach ($pms as $uid => $name) {
            $new_pm = array(
              'uid' => $uid,
              'nid' => $node->nid,
              'weight' => $weight,
            );
            _osha_workflow_pm_save_row($new_pm);
            $weight++;
          }
          drupal_set_message(
            strtr('Assigned default project managers of this section (!names) to the review process', array('!names' => implode(', ', $pms)))
          );
        }
        else {
          drupal_set_message('No default project manager was found. Please select manually.');
        }
      }
    }
    // Assign the default approver list, if none assigned.
    if (!osha_workflow_get_node_approvers($node->nid, FALSE)) {
      $approvers = osha_workflow_get_node_approvers($node->nid);
      if ($approvers) {
        drupal_set_message('Assigned the default list of approvers for the approval process');
        osha_workflow_set_node_approvers($node->nid, array_keys($approvers));
      }
      else {
        drupal_set_message('No default approvers defined. Ask administrator to define the default list of approvers.');
      }
    }
    OshaWorkflowNotifications::notifyOnChangeFromDraftToFinalDraft($node);
    $rm_notified = TRUE;
  }
  if ($old != OSHA_WORKFLOW_STATE_DRAFT && $new == OSHA_WORKFLOW_STATE_DRAFT) {
    OshaWorkflowNotifications::notifyOnChangeToDraft($node);
  }
  // We come from other states into TO_BE_APPROVED
  // State TO_BE_APPROVED => TO_BE_APPROVED happens during approval process.
  if ($old != OSHA_WORKFLOW_STATE_TO_BE_APPROVED && $new == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    osha_workflow_reset_node_approvers($node->nid);
    OshaWorkflowNotifications::notifyFirstApprover($node);
    // Review manager should not be notified when approvers
    // mark as approved (not state change).
    $rm_notified = TRUE;
  }
  if (($old == OSHA_WORKFLOW_STATE_DRAFT || $old == OSHA_WORKFLOW_STATE_FINAL_DRAFT) && $new == OSHA_WORKFLOW_STATE_TO_BE_REVIEWED) {
    // Reset existing votes.
    $exiting_pms_entries = osha_workflow_get_pms_entries($node->nid);
    if (!empty($exiting_pms_entries)) {
      foreach ($exiting_pms_entries as $pm_entry) {
        $pm_entry->approved = NULL;
        $pm_entry->message = NULL;
        _osha_workflow_pm_save_row($pm_entry);
      }
    }
    OshaWorkflowNotifications::notifyOnChangeFromDraftOrFinalDraftToBeReviewed($node);
    $rm_notified = TRUE;
  }
  if ($old == OSHA_WORKFLOW_STATE_TO_BE_APPROVED && ($new == OSHA_WORKFLOW_STATE_APPROVED || $new == OSHA_WORKFLOW_STATE_REJECTED)) {
    if ($new == OSHA_WORKFLOW_STATE_APPROVED) {
      osha_workflow_approve($node, OSHA_WORKFLOW_STATE_APPROVED);
      OshaWorkflowNotifications::notifyOnNodeApproved($node);
    }
    else {
      osha_workflow_approve($node, OSHA_WORKFLOW_STATE_REJECTED);
      OshaWorkflowNotifications::notifyOnNodeRejected($node);
    }
    $rm_notified = TRUE;
  }
  if ($old == OSHA_WORKFLOW_STATE_APPROVED && $new == OSHA_WORKFLOW_STATE_FINAL_DRAFT) {
    OshaWorkflowNotifications::notifyNodeRejectedFromApprovedToFinalDraft($node);
    $rm_notified = TRUE;
  }
  if ($new == OSHA_WORKFLOW_STATE_READY_TO_PUBLISH && $old != OSHA_WORKFLOW_STATE_READY_TO_PUBLISH) {
    OshaWorkflowNotifications::notifyNodeIsReadyToPublish($node);
    $rm_notified = TRUE;
  }

  if (!$rm_notified) {
    OshaWorkflowNotifications::notifyWebTeamStatusChanged($node, $old, $new);
  }

  $detected = arg(3);
  if (!$detected) {
    $detected = $language->language;
  }

  if (($old == $new) && ($detected == 'en')) {
    $node_revisions = node_revision_list($node);
    if (count($node_revisions) > 1) {
      $new = array_shift($node_revisions);
      $old = array_shift($node_revisions);
      $new_node = node_load($node->nid, $new->vid);
      $old_node = node_load($node->nid, $old->vid);
      if (
        ($new_node->title_field['en'][0]['value'] != $old_node->title_field['en'][0]['value']) ||
        ($new_node->body['en'][0]['value'] != $old_node->body['en'][0]['value'])
      ) {
        // Notification for title or body changes.
        OshaWorkflowNotifications::notifyWebTeamTextChanged($node);
      }
    }
  }

  // Reindex all published translations.
  if( !empty($node->translations->data)) {
    foreach ($node->translations->data as $lang => $tr) {
      search_api_track_item_change('search_api_et_node', array($lang . '_' . $node->nid));
    }
  }
}

/**
 * Implements hook_workbench_moderation_access_alter().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_access_alter(&$access, $op, $node) {
  global $user;
  if (OshaWorkflowPermissions::userIsAdministrator($user)) {
    return $access = TRUE;
  }

  // Allow everyone access to moderation history
  if ($op == 'view history' && user_access('view moderation history')) {
    $access = 1;
    return NULL;
  }

  // Allow everyone access to view revisions
  if ($op == 'view revisions' && user_access('view revisions')) {
    $access = 1;
    return NULL;
  }

  if ($op == 'update') {
    $is_rm = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_REVIEW_MANAGER, $user);
    $is_pm = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_PROJECT_MANAGER, $user);
    $is_editor = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_EDITOR, $user);

    $node_in_rm_section = osha_workflow_node_in_rm_section($node, $user);
    $node_in_editor_section = osha_workflow_node_in_editor_section($node, $user);
    $node_in_pm_section = osha_workflow_node_in_pm_section($node, $user);

    $access = FALSE;
    $state = $node->workbench_moderation['current']->state;

    /* Project manager */
    // Allow moderation of nodes for PM assigned to a node.
    if ($is_pm && osha_workflow_node_in_pm_section($node->nid, $user)) {
      $access = TRUE;
      return NULL;
    }

    /* Review manager and Editor */
    if ($node_in_rm_section || $node_in_editor_section) {
      $access = 1;
      return NULL;
    }

    /* Approver */
    // Allow next approver permission
    if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
      $next_approver = osha_workflow_get_next_approver($node->nid);
      $is_next_approver = isset($next_approver->uid) && $user->uid == $next_approver->uid;
      // Check the user is next to take action. Otherwise deny change.
      if ($is_next_approver) {
        $access = TRUE;
        return NULL;
      }
    }
  }
  return NULL;
}

/**
 * Implements hook_workbench_moderation_states_next_alter().
 *
 * {@inheritdoc}
 */
function osha_workflow_workbench_moderation_states_next_alter(&$access, $op, $node) {
  $the_node = $node['node'];
  $the_user = $node['account'];
  if(isset($the_node->workbench_moderation['current']->state)) {
    $state = $the_node->workbench_moderation['current']->state;
    if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
      $is_workflow_admin = user_access('moderate content from approved to ready_to_publish');
      if (!$is_workflow_admin && osha_workflow_has_approved($the_node->nid, $the_user->uid)) {
        $access = array();
      }
      else {
        // Hard code this states to force power users to follow workflow.
        // i.e current user is RM on other section but last approver here
        //     -> without this would have multiple state available in drop-down.
        $approver_states = drupal_map_assoc(array(OSHA_WORKFLOW_STATE_APPROVED, OSHA_WORKFLOW_STATE_REJECTED));
        $access = array_intersect_key($access, $approver_states);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function osha_workflow_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'workbench_moderation_moderate_form') {
    $is_approver = OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_APPROVER, $user);
    if ($is_approver && !osha_workflow_is_last_approver($form['node']['#value'])) {
      unset($form['state']['#options']['approved']);
      unset($form['state']['#options']['rejected']);
      if (empty($form['state']['#options'])) {
        $form['#access'] = FALSE;
      }
    }
  }

  if ($form_id == 'entity_collection_content_add_form') {
    if ($collection = $form_state['entity_collection']) {
      if ($collection->bundle == 'moderators_group') {
        $options = osha_workflow_users_get_users_from_role_as_options(OSHA_WORKFLOW_ROLE_APPROVER);
        $users = array();
        foreach ($options as $uid => $account) {
          $users['user:' . $uid] = $account;
        }
        $form['add_content']['#title'] = t('Add approvers into the list');
        $form['add_content']['entity_type']['#access'] = FALSE;
        $form['add_content']['content_select'] = array(
          '#type' => 'select',
          '#options' => $users,
          '#description' => t('Select the person account from the list then press <b>Add content</b>'),
        );
      }
    }
  }
  if ($form_id == 'entity_collection_content_form') {
    if ($collection = $form_state['entity_collection']) {
      if ($collection->bundle == 'moderators_group' && !empty($form['content'])) {
        foreach ($form['content'] as &$row) {
          hide($row['style']);
        }
      }
    }
  }
  if ($form_id == 'views_exposed_form' && $form_state['view']->name == 'osh_workflow_admin'
    && $form_state['view']->current_display == 'content') {
//    $form['access_id']['#multiple'] = TRUE;
//    $form['access_id']['#size'] = 1;
  }
  elseif ($form_id == 'workbench_access_settings_form') {
    $form['osha_workflow_send_mail'] = array(
      '#type' => 'checkbox',
      '#title' => 'Send notifications',
      '#default_value' => variable_get('osha_workflow_send_mail'),
    );
  }
  if (isset($form_state['node'])) {
    $node = $form_state['node'];
    $to_be_approved = isset($node->workbench_moderation['current']) && $node->workbench_moderation['current']->state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED;
    if (!empty($node->nid) && $to_be_approved ) {
      $next_aprover = osha_workflow_is_next_approver($node->nid);
      if ($next_aprover && $form_id == $node->type . '_node_form') {
        reset($node->workbench_access);
        $ai = current($node->workbench_access);
        $tai = taxonomy_term_load($ai);
        $form['workbench_access']['workbench_access']['#options'] = array($ai => $tai->name);
      }
    }
  }
}

/**
 * Implements hook_forms_views_exposed_form_alter().
 *
 * {@inheritdoc}
 */
function osha_workflow_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-osh-workflow-admin-page-pm-review') {
    if (empty($form_state['input']['state'])) {
      $form_state['input']['state'][] = 'rejected';
      $form_state['input']['state'][] = 'approved';
      $form_state['input']['state'][] = 'needs_review';
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function osha_workflow_form_node_form_alter(&$form, $form_state) {
  global $user;

  if (!empty($form['actions'])) {
    $form['actions_top'] = $form['actions'];
    $form['actions_top']['#weight'] = -999;
    $form['actions_top']['#attributes']['style'] = 'text-align: right';
  }

  // This must be a node form and a node that has moderation enabled.
  // Extended to include moderation check on the individual node.
  if (!workbench_moderation_node_moderated($form['#node'])) {
    return;
  }
  if (isset($form['#node']->workbench_moderation['current']->state)) {
    $node = $form['#node'];
    $state = $form['#node']->workbench_moderation['current']->state;
    if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
      if (osha_workflow_is_next_approver($node->nid) && OshaWorkflowPermissions::userHasRole(OSHA_WORKFLOW_ROLE_APPROVER, $user)) {
        $form['revision_information']['workbench_moderation_state_new']['#access'] = FALSE;
      }
    }
  }
  else {
    $state = 'draft';
  }

  $form['options']['vesafe_workflow_list'] = _osha_workflow_get_states_list($state);
  $form['revision_information']['vesafe_workflow_list'] = _osha_workflow_get_states_list($state);

}


/**
 * Implements hook_block_info().
 */
function osha_workflow_block_info() {
  $blocks['osha_workflow_info'] = array(
    'info' => 'Osha workflow summary',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function osha_workflow_block_view($delta = '') {
  if (!user_access('view all unpublished content')) {
    return NULL;
  }
  if ($delta == 'osha_workflow_info') {
    $node = menu_get_object();
    $is_node = !empty($node);
    $is_moderated = $is_node && workbench_moderation_node_type_moderated($node->type);
    if (!$is_node || !$is_moderated) {
      return NULL;
    }

    $arg_2 = arg(2);
    $view_draft = !empty($arg_2) && $arg_2 == 'draft';
    if (!empty($arg_2) && !$view_draft) {
      //return NULL; // enable views draft buttons
    }

    //  workbench_moderation_node_current_load
    $content['form'] = drupal_get_form('osha_workflow_moderation_moderate_form', $node, "node/{$node->nid}/current-revision");

    $block = array(
      'subject' => '',
      'content' => $content,
    );
    return $block;
  }
  return NULL;
}

/**
 * @see workbench_moderation_moderate_form.
 */
function osha_workflow_moderation_moderate_form($form, &$form_state, $node, $destination = NULL) {
  global $user;
  $form = array();
  if (!_workbench_moderation_access('update', $node)) {
    $form['#access'] = FALSE;
    return $form;
  }

  $arg_2 = arg(2);
  $view_draft = !empty($arg_2) && $arg_2 == 'draft';

//  $form['#attributes']['class'][] = 'workbench-moderation-moderate-form';
//  $form['#attached']['css'][] = drupal_get_path('module', 'workbench_moderation') . '/css/workbench_moderation.css';
  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );


  if (!$view_draft && $node->status == 1){
    $link = workbench_moderation_access_link(t('Unpublish this revision'), "node/{$node->nid}/moderation/{$node->vid}/unpublish", ['attributes' => ['class' => 'btn']]);
    $form['states'] = _osha_workflow_get_states_list('published');
    $form['unpublish'] = [
      '#markup' => $link,
    ];
  }
  elseif ($next_states = workbench_moderation_states_next($node->workbench_moderation['current']->state, $user, $node)) {

    $state = $node->workbench_moderation['current']->state;

    $form['node']['#value'] = workbench_moderation_node_current_load($form['node']['#value']);
    $form['states'] = _osha_workflow_get_states_list($state);
    $form['states']['#weight'] = -99;
    $form['#destination'] = $destination;

    $transitions = workbench_moderation_transitions();
    $to = [];

    foreach ($transitions as $transition) {
      if ($transition->from_name == $state && in_array($transition->to_name, array_keys($next_states))) {
        $to[$transition->to_name] = $transition;
      }
    }

    $states = _osha_workflow_get_states();

    $form['next_state'] = array(
      '#type' => 'container',
//      '#prefix' => '<div>' . t('Moderation state') . '</div>',
    );
    foreach ($to as $trans) {
      if(_workbench_moderation_moderate_access($node, $trans->to_name)){
        $form['next_state'][$trans->to_name] = [
          '#type' => 'submit',
          '#value' => 'Send to "' . $states[$trans->to_name] . '"',
          '#attributes' => ['class' => ['btn',  'btn-primary']],
          '#weight' => osha_workflow_moderation_status_weight($trans->to_name),
        ];
      }
    }

    if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
      $is_workflow_admin = user_access('moderate content from approved to ready_to_publish');
      $next = osha_workflow_get_next_approver($node->nid);
      global $user;
      if (!osha_workflow_needs_last_approver($node)) {
        // If next approver or administrator.
        if ($next || $is_workflow_admin) {
          if ($user->uid == $next->uid
            || $is_workflow_admin) {
            // Hijack the form & add Done button.
            $form['submit'] = array(
              '#type' => 'submit',
              '#value' => t('Done'),
              '#submit' => array('osha_workflow_form_moderate_approve_submit'),
            );
            if ($is_workflow_admin && $next->uid != $user->uid) {
              $form['submit']['#prefix'] = t('Approve instead of @user',
                array('@user' => $next->name));
            }
            hide($form['next_state']);
          }
        }
      }
      else {
        // If last approver.
        if ($is_workflow_admin && $next->uid != $user->uid) {
          $form['state']['#prefix'] = t('Approve instead of @user',
            array('@user' => $next->name));
        }
      }
    }

    $form['#validate'] = ['workbench_moderation_moderate_form_validate'];

    // Cache the form on first load to preserve the node for validation.
    // Otherwise, the node would be reloaded on submit, and there would be no
    // way to detect if the current revision has been changed.
    $form_state['cache'] = TRUE;
  }
  else {
    $state = $node->workbench_moderation['current']->state;
    $form['states'] = _osha_workflow_get_states_list($state);
  }

  return $form;
}

/**
 * @see workbench_moderation_moderate_form_submit.
 */
function osha_workflow_moderation_moderate_form_submit($form, &$form_state) {

  $values = $form_state['values'];
  // OP has the same value as button, so prevent overwrite on flip.
  unset($values['op']);
  unset($values['node']);
  $op = $form_state['values']['op'];

  $next_state = array_flip($values)[$op];

  if (_workbench_moderation_moderate_access($form_state['values']['node'], $next_state)) {
    workbench_moderation_moderate(node_load($form_state['values']['node']->nid, $form_state['values']['node']->vid), $next_state);
  }

  // This is not ideal, but if the form is invoked from a node's draft tab and
  // used to publish the node, the draft tab will not be available after
  // publishing, and Drupal's will throw an access denied error before it is
  // able to redirect to the published revision.
  if (!empty($form['#destination'])) {
    if ($next_state == workbench_moderation_state_published()) {
      if ($uri = entity_uri('node', $form['node']['#value'])) {
        // Disable lookup of the path alias, since the path alias might get
        // changed by modules such as Pathauto.
        $uri['options']['alias'] = TRUE;
        $form_state['redirect'] = array($uri['path'], $uri['options']);
      }
    }
    else {
      $form_state['redirect'] = $form['#destination'];
    }
    drupal_redirect_form($form_state);
  }
}

function _osha_workflow_get_states() {
  return [
    'rejected' => 'Rejected',
    'draft' => 'Draft',
    'final_draft' => 'Final Draft',
    'needs_review' => 'To be reviewed',
    'to_be_approved' => 'To be approved',
    'approved' => 'Approved',
    'ready_to_publish' => 'Ready to publish',
    'published' => 'Published',
  ];
}

function _osha_workflow_get_states_list($active_state) {
  $states = _osha_workflow_get_states();

  $items = [];
  foreach ($states as $state_key => $state_label) {
    $items[] = [
      'data' => $state_label,
      'class' => [$state_key == $active_state ? 'active' : ''],
    ];
  }
  return [
    '#theme' => 'item_list',
    '#items' => $items,
    '#attached' => [
      'css' => [
        drupal_get_path('module', 'osha_workflow') . '/css/workflow_states.css'
      ]
    ],
    '#attributes' => ['class' => ['vesafe-workflow-list-widget']],
  ];
}

function osha_workflow_moderation_status_weight($status){
  switch($status){
    case 'ready_to_publish':
      return 9;
      break;
    case 'published':
      return 10;
      break;

    default:
      return 0;
      break;
  }
}



/**
 * Load a single node_approval entity.
 *
 * @param int $id
 *   Primary key
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function disabled_osha_workflow_node_approval_load($id, $reset = FALSE) {
  $ret = entity_load('node_approval', array($id), array(), $reset);
  return reset($ret);
}

/**
 * Load node_approval entities from database.
 *
 * @param array $ids
 *   An array of entity IDs, or FALSE to load all entities.
 * @param array $conditions
 *   (deprecated) An associative array of conditions on the base table, where
 *   the keys are the database fields and the values are the values those
 *   fields must have. Instead, it is preferable to use EntityFieldQuery to
 *   retrieve a list of entity IDs loadable by this function.
 * @param bool $reset
 *   Whether to reset the internal cache for the requested entity type.
 *
 * @return mixed
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 */
function osha_workflow_node_approval_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('node_approval', $ids, $conditions, $reset);
}

/**
 * Form validator.
 */
function osha_workflow_workbench_moderation_approval_form_validate($form, $form_state) {
  $node = $form_state['values']['node'];
  $state = $form_state['values']['state'];
  if ($state == OSHA_WORKFLOW_STATE_TO_BE_REVIEWED) {
    $pms = osha_workflow_get_pms_users($node->nid);
    if (empty($pms)) {
      form_set_error('', t('Cannot change state because there is no Project Manager assigned to this node. Use the Review tab to assign one first.'));
    }
  }
  if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    $approvers = osha_workflow_get_node_approvers($node->nid, FALSE);
    if (empty($approvers)) {
      form_set_error('', t('Cannot change state because the approval queue is empty. Use the approve tab to set the approver list'));
    }
  }
}

/**
 * Submit form hook for vote - when approved.
 */
function osha_workflow_form_moderate_approve_submit($form, $form_state) {
  $values = $form_state['values'];
  $node = $values['node'];
  $state = $node->workbench_moderation['current']->state;
  if ($state == OSHA_WORKFLOW_STATE_TO_BE_APPROVED) {
    workbench_moderation_moderate($node, OSHA_WORKFLOW_STATE_TO_BE_APPROVED);
    osha_workflow_approve($node, OSHA_WORKFLOW_STATE_APPROVED);
    OshaWorkflowNotifications::notifyNextApproverToTakeAction($node);
  }
}

/**
 * Implements hook_mail_alter().
 */
function osha_workflow_mail_alter(&$message) {
  if (strpos($message['key'], 'osha_workflow')) {
    // Block mails that are send for hwc workflow if user's preference.
    $user = user_load_by_mail($message['to']);
    $send_notif = variable_get('osha_workflow_send_mail', FALSE);
    // When using rereoute mail, the to address is not of an user.
    $usr_receive_notif = empty($user) || !empty($user->field_cmw_mail_notifications[LANGUAGE_NONE][0]['value']);
    if (!$send_notif || !$usr_receive_notif) {
      $message['send'] = FALSE;
    }
  }
}

/**
 * Implements hook_mail().
 *
 * {@inheritdoc}
 */
function osha_workflow_mail($key, &$message, $params) {
  $subject = variable_get('osha_mail_template_approval_subject', '[OSHA Website] CMW: ([node:nid]) [node:title-field]');
  $action = isset($params['action']) ? $params['action'] : 'reviewed';
  $status = isset($params['status']) ? $params['status'] : 'N/A';
  $text = isset($params['text']) ? $params['text'] : ('There is new content to be ' . $action . ' by you');

  $text_2 = '';
  $count = isset($params['count']) ? $params['count'] : NULL;
  $link = isset($params['link']) ? $params['link'] : NULL;
  if ($count && $link) {
    $text_2 = 'There are <strong>' . $count . '</strong> items that you can review from <a href="' . url($link, ['absolute' => TRUE]) . '">here.</a>';
  }


  $body = variable_get('osha_mail_template_approval_body',
    'Dear <b>[user:name]</b>,<br>'.

    $text.': <a href="[node:url]">[node:title-field]</a> (type: [node:type], status: <b>'.$status.'</b>).'.

    $text_2 .

    '<br>Thank you,'
  );

  if ($key == 'osha_workflow_notification_text_changed') {
    $body = variable_get('osha_mail_template_text_changed_body',
      'Dear <b>[user:name]</b>,<br>

      No action is required. This message is just to inform you that there has been a text change on page <a href="[node:node-translate]">[node:title-field]</a>.

      <br>Thank you,'
    );
  }

  if ($key == 'osha_workflow_notification_admin') {
    $body = variable_get('osha_mail_template_approval_body',
      'Dear <b>[user:name]</b>,<br>

      No action is required. This message is just to inform you that there has been a status change (from <b>'
      . $params['from'] . '</b> to <b>' . $params['to']
      . '</b>) on page <a href="[node:url]">[node:title-field]</a>.

      <br>Thank you,'
    );
  }
  $message['subject'] = token_replace($subject, $params);
  $message['body'][] = token_replace($body, $params);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function osha_workflow_form_tmgmt_entity_ui_translate_form_alter(&$form, &$form_state, $form_id) {
  $nid = arg(1);
  if ($nid) {
    $node = node_load($nid);
  }
  $revision_list = node_revision_list($node);
  $vids = array_keys($revision_list);
  if (count($vids) < 2) {
    return '';
  }
  module_load_include('inc', 'diff', 'diff.pages');

  $diff_limit = variable_get('osha_workflow_diff_limit', 25);
  $pm_diffs = [];
  for($i = 0; $i < count($vids); $i++) {
    if ($i == $diff_limit) {
      break;
    }
    $new_vid = $vids[$i];
    $old_vid = $vids[$i + 1];

    $build = osha_workflow_diffs_show($node, $old_vid, $new_vid, 'raw_plain');
    $pm_diffs[] = $build;
  }
  if (!$pm_diffs) {
    return ;
  }
  $form['pm_diffs'] = $pm_diffs;
}
