<?php
/**
 * @file
 * osha_lingua_tools module file
 */

function osha_lingua_tools_menu() {

  $items['node/%node/linguatools'] = array(
    'title' => 'Lingua Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_lingua_form'),
    'access callback' => 'linguatools_access',
    'weight' => 7,
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

function osha_lingua_tools_form_alter(&$form, &$form_state, $form_id) {
}

/**
 * Implements hook_node_submit().
 */
function osha_lingua_tools_node_submit($node, $form, &$form_state) {
  // MC-73 When adding/deleting a file in english, it needs to be added/deleted
  // from other languages too.
  $old_node = $form['#node'];
  $fields = _osha_lingua_tools_translatable_field_instances($node->type);
  foreach ($fields as $field) {
    $fieldname = $field['field_name'];
    $diff = _osha_lingua_tools_filefield_diff($old_node, $node, $fieldname, 'en');
    $files_added = $diff['files_added'];
    $files_deleted = $diff['files_deleted'];

    if (!empty($files_deleted)) {
      foreach ($node->{$fieldname} as $lang => $items) {
        foreach ($items as $key => $item) {
          if (array_key_exists($item['fid'], $files_deleted)) {
            unset($node->{$fieldname}[$lang][$key]);
          }
        }
      }
    }
    if (!empty($files_added)) {
      foreach ($files_added as $file) {
        foreach ($node->{$fieldname} as $lang => &$items) {
          if ($lang == 'en') {
            continue;
          }
          $exists = FALSE;
          foreach ($items as $item) {
            if ($item['fid'] == $file['fid']) {
              $exists = TRUE;
              break;
            }
          }
          if (!$exists) {
            $items[] = $file;
          }
        }
      }
    }
  }
}

/**
 * Helper function to get the files added/deleted in a certain field after a
 * node save.
 *
 * @param $old_node
 * @param $new_node
 * @param $fieldname
 * @param string $language
 * @return array
 *  Array with files added/deleted.
 */
function _osha_lingua_tools_filefield_diff($old_node, $new_node, $fieldname, $language = 'en') {
  $files_added = $files_deleted = array();
  $old_node_elems = isset ($old_node->{$fieldname}[$language]) && !empty($old_node->{$fieldname}[$language]);
  $node_elems = isset ($new_node->{$fieldname}[$language]) && !empty($new_node->{$fieldname}[$language]);
  if ($old_node_elems) {
    foreach ($old_node->{$fieldname}[$language] as $key => $old_file) {
      $files_deleted[$old_file['fid']] = $old_node->{$fieldname}[$language][$key];
    }
    if ($node_elems) {
      foreach ($new_node->{$fieldname}[$language] as $key => $file) {
        if (array_key_exists($file['fid'], $files_deleted)) {
          unset($files_deleted[$file['fid']]);
        }
        else {
          $files_added[$file['fid']] = $new_node->{$fieldname}[$language][$key];
        }
      }
    }
  }
  elseif ($node_elems) {
    foreach ($new_node->{$fieldname}[$language] as $key => $file) {
      $files_added[$file['fid']] = $old_node->{$fieldname}[$language][$key];
    }
  }
  return array(
    'files_added' => $files_added,
    'files_deleted' => $files_deleted,
  );
}

function form_lingua_form($form, &$form_state) {
  $node = menu_get_object();
  $translated_in = array();
  $numlen = count($node->translations->data);

  if ($numlen <= 1) {
    //echo ("There are no translations for this node");
    $form['header_text'] = array(
      '#markup' => '<p class="linguaheader">There are no translations for this node.</p>',
      '#fieldintname' => '0'
    );
  }
  else {
    //Get the node id, what we want translate.

    $type = $node->type;
    $fields = field_info_instances("node", $type);
    $countfields = 1;
    $ispublished = $node->workbench_moderation['current']->published;

    foreach ($fields as $field) {
      $fieldname = $field['label'];
      $fieldname = str_replace(' ', '_', $fieldname);
      $fieldintname = $field['field_name'];
      $arrayfield = $node->$fieldintname;

      //TODO Check that the field has data
      $numdatosfield = count($arrayfield) + 1;
      $fieldid = $field['field_id'];
      $transfield = istranslatable($fieldid);

      $form['header_text'] = array(
        '#markup' => '<p class="linguaheader">Please, select the fields to spread and press the <strong>spread data</strong> button.</p>',
        '#fieldintname' => '0'
      );
      if ($transfield == 1 && $field['widget']['module'] != 'media' && $field['widget']['module'] != 'file' && $field['widget']['module'] != 'pdf_to_image' && $numdatosfield > 0) {
        $countfields++;
        $form[$fieldname] = array(
          '#title' => $fieldname,
          '#type' => 'checkbox',
          '#fieldintname' => $fieldintname,
        );
      }
    }

    $form['url'] = array(
      '#title' => 'URL',
      '#type' => 'checkbox',
    );

    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Spread data'),
      '#numfields' => $countfields,
      '#nodeid' => $node->nid,
      '#noderevid' => $node->workbench_moderation['current']->vid,
      '#ispublished' => $ispublished,
    );
  }

  $languages = tmgmt_available_languages();
  unset($languages[$node->translations->original]);
  foreach ($node->translations->data as $lang => $translation) {
    $translated_in[$lang] = $languages[$lang];
    unset($languages[$lang]);
  }
  unset($translated_in['en']);
  $selected_languages = array_intersect_key($languages, osha_language_list_options());

  $form['target_language'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Add translations for'),
    '#multiple' => TRUE,
    '#options' => $languages,
    '#default_value' => array_keys($selected_languages),
    '#weight' => array('#weight' => 6)
  );
  $form['create_translations_submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Create translations'),
    '#submit' => array('osha_lingua_tools_create_translations'),
    '#weight' => array('#weight' => 7),
  );

  $fields = _osha_lingua_tools_translatable_field_instances($node->type);
  if (!empty($fields)) {
    $form['propagate_files_header_text'] = array(
      '#markup' => '<p class="linguaheader">Please, select the files to spread and the languages where to copy the files, then press the <strong>spread files</strong> button.</p>',
      '#weight' => array('#weight' => 8),
    );

    $form['spread_files_fields'] = array(
      '#weight' => array('#weight' => 9),
    );

    $form['spread_files_target_language'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Copy files to'),
      '#multiple' => TRUE,
      '#options' => $translated_in,
      '#default_value' => array_keys($translated_in),
      '#weight' => array('#weight' => 10)
    );

    $form['propagate_files_submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Spread files'),
      '#submit' => array('osha_lingua_tools_spread_files'),
      '#weight' => array('#weight' => 11),
    );
  }
  foreach ($fields as $field) {
    $files_to_copy = array();
    $selected_files = array();
    foreach ($node->{$field['field_name']}['en'] as $item) {
      $files_to_copy[$item['fid']] = $item['filename'];
      foreach ($translated_in as $lang => $language) {
        $found = FALSE;
        foreach ($node->{$field['field_name']}[$lang] as $translated_item) {
          if ($translated_item['fid'] == $item['fid']) {
            $found = TRUE;
            break;
          }
        }
        if (!$found) {
          $selected_files[$item['fid']] = [$item['fid']];
          break;
        }
      }
    }
    $form['spread_files_fields'][$field['field_name']] = array(
      '#type' => 'checkboxes',
      '#title' => $field['label'],
      '#multiple' => TRUE,
      '#options' => $files_to_copy,
      '#default_value' => array_keys($selected_files),
    );
  }

  return $form;
}

function linguatools_access() {
  global $user;
  $useradmin = 0;

  foreach ($user->roles as $userrol) {
    if ($userrol == 'administrator') {
      return TRUE;
    }
  }

  return FALSE;

}

function istranslatable($idfield) {
  $result = db_select('field_config', 'f')
    ->fields('f', array('translatable'))
    ->condition('id', $idfield, '=')
    ->execute()
    ->fetchAssoc();
  return $result['translatable'];
}

function form_lingua_form_validate($form, &$form_state) {
  if ($form_state['triggering_element']['#id'] != 'edit-submit-button') {
    return;
  }

  foreach ($form_state['values'] as $values) {

    if ($values == 1) {
      return 1;
    }
  }
  drupal_set_message(t("You need to select at least one field for spread!"), 'error');
  return FALSE;
}

function form_lingua_form_submit($form, &$form_state) {
  $intnumfields = $form['submit_button']['#numfields'];
  $intnodeid = $form['submit_button']['#nodeid'];
  $intrevid = $form['submit_button']['#noderevid'];
  $ispublished = $form['submit_button']['#ispublished'];

  if ($form_state['values']['url'] == 1) {
    propage_url($intnodeid);
  }

  $intcont = 0;

  foreach ($form as $fieldchk) {
    $fieldintname = $fieldchk['#fieldintname'];
    if ($fieldintname <> '0') { //0 Is the value of the summary field

      $fieldupdate = $form_state['values'][$fieldchk['#title']];
      if ($fieldupdate) {
        propage_translation($fieldchk['#title'], $intnodeid, $intrevid, $ispublished, $fieldintname);
      }
    }
    $intcont++;
    if ($intcont == $intnumfields) {
      if ($ispublished == 1) {
        drupal_flush_all_caches();
      }
      break;
    }
  }
}

function propage_translation($field_name, $intnodeid, $intrevid, $ispublished, $fieldintname) {
  $node = node_load($intnodeid);

  if ($field_name == 'body') {
    $table_name = 'field_data_body';
    $table_rev_name = 'field_revision_body';
    $field_name = 'body_value';
  }
  else {
    $table_name = 'field_data_' . $fieldintname;
    $table_rev_name = 'field_revision_' . $fieldintname;
    $field_name = $fieldintname . '_value';
  }

  //If the status of the node is published then We get the value to spread from the data field else we get the data from the revision field.
  If ($ispublished == 1) {
    $result = db_select($table_name, 'f')
      ->fields('f', array($field_name))
      ->condition('entity_id', $intnodeid, '=')
      ->condition('language', 'en', '=')
      ->orderBy('revision_id', 'DESC')
      ->execute()
      ->fetchAssoc();
  }
  else {
    $result = db_select($table_rev_name, 'f')
      ->fields('f', array($field_name))
      ->condition('entity_id', $intnodeid, '=')
      ->condition('language', 'en', '=')
      ->orderBy('revision_id', 'DESC')
      ->execute()
      ->fetchAssoc();
  }
  $propvalue = $result[$field_name];


  if ($propvalue == "" || $propvalue == NULL) {
    return FALSE;
  }

  //update the field_data fields
  $data = db_update($table_name)
    ->fields(array(
      $field_name => $propvalue,
    ))
    ->condition('entity_id', $intnodeid)
    ->execute();

  //update the field_revision fields
  $data2 = db_update($table_rev_name)
    ->fields(array(
      $field_name => $propvalue,
    ))
    ->condition('entity_id', $intnodeid)
    ->condition('revision_id', $intrevid)
    ->execute();
  drupal_set_message(t("Field " . $field_name . " updated"), 'status');

}

function propage_url($intnodeid) {
  $node = node_load($intnodeid);
  $propvalue = $node->path['alias'];

  $aliasurl = "node/" . $intnodeid;
  //update the url field
  $data = db_update('url_alias')
    ->fields(array(
      'alias' => $propvalue,
    ))
    ->condition('source', $aliasurl)
    ->execute();

  drupal_set_message(t("URL Alias updated"), 'status');
}

function osha_lingua_tools_create_translations($form, &$form_state) {
  $languages = $form_state['values']['target_language'];
  $node = menu_get_object();
  $source_lang = $node->translations->original;
  $translation_handler = entity_translation_get_handler('node', $node);
  $type = $node->type;
  $fields = _osha_lingua_tools_translatable_field_instances($type);
  foreach ($languages as $lang_code => $value) {
    if ($value) {
      $translation_handler->setTranslation(
        array(
          'translate' => 0,
          'status' => 1,
          'uid' => 1,
          'language' => $lang_code,
          'source' => $source_lang,
        )
      );
    }
  }
  $translation_handler->saveTranslations();

  $node = workbench_moderation_node_current_load($node);
  $new_node = new stdClass();
  $new_node->id = $node->nid;
  $new_node->nid = $node->nid;
  $new_node->vid = $node->vid;
  $new_node->type = $type;
  $new_node->bundle = $type;
  $new_node->translations = $node->translations;
  foreach ($languages as $lang_code => $value) {
    if ($value) {
      foreach ($fields as $field) {
        // MC-73 Copy values for translatable file fields
        $new_node->{$field['field_name']}[$lang_code] = $node->{$field['field_name']}[$source_lang];
      }
    }
  }
  field_attach_update('node', $new_node);

  // clone url_aliases
  foreach ($languages as $lang_code => $value) {
    if ($value) {
      $args = array(
        'source' => 'node/' . $node->nid,
        'alias' => $node->path['alias'],
        'language' => $lang_code,
      );
      path_save($args);
    }
  }
}

/**
 * Helper function to get translatable fields with cardinality > 1.
 *
 * @param $bundle
 *  The type of the node to call field_info_instances().
 * @return array
 *  Array of fields.
 */
function _osha_lingua_tools_translatable_field_instances($bundle) {
  $translatable_fields = array();
  $fields = field_info_instances('node', $bundle);
  foreach ($fields as $field) {
    $fieldname = $field['field_name'];
    $transfield = istranslatable($field['field_id']);
    $info = field_info_field($fieldname);
    if ($transfield == 1
      && $field['widget']['module'] == 'file'
      && ($info['cardinality'] > 1 || $info['cardinality'] == FIELD_CARDINALITY_UNLIMITED)) {
      $translatable_fields[] = $field;
    }
  }
  return $translatable_fields;
}

/**
 * Copy the selected files from english to all selected languages.
 *
 * @param $form
 * @param $form_state
 */
function osha_lingua_tools_spread_files($form, &$form_state) {
  $node = menu_get_object();
  $fields = _osha_lingua_tools_translatable_field_instances($node->type);

  foreach ($fields as $field) {
    // Get files objects that needs to be copied.
    $items_to_copy = array();
    foreach ($node->{$field['field_name']}['en'] as $item) {
      if (in_array($item['fid'], $form_state['values'][$field['field_name']])) {
        $items_to_copy[] = $item;
      }
    }

    // Copy the files to all selected languages.
    foreach ($form_state['values']['spread_files_target_language'] as $lang_code => $value) {
      if ($value) {
        foreach ($items_to_copy as $item_to_copy) {
          $exists = FALSE;
          foreach ($node->{$field['field_name']}[$lang_code] as $item) {
            if ($item_to_copy['fid'] == $item['fid']) {
              $exists = TRUE;
              break;
            }
          }
          if (!$exists) {
            $node->{$field['field_name']}[$lang_code][] = $item_to_copy;
          }
        }
      }
    }
  }

  node_save($node);
}