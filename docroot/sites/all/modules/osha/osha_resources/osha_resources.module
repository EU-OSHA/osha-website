<?php
/**
 * @file
 * Code for the Resources feature.
 */

include_once 'osha_resources.features.inc';

/**
 * Define custom view mode for entities - wiki
 */
function osha_resources_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['osha_resources'] = array(
    'label' => t('Additional resource'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_node_view
 * @param $node
 * @param $view_mode
 * @param $langcode
 */
function osha_resources_node_view_alter(&$build){
  if($build['#bundle'] == 'youtube'){
    if(isset($build['field_youtube']) && $build['field_youtube']['#formatter'] == 'youtube_thumbnail'){
      foreach($build['field_youtube'] as $key => $youtube){
        if(is_array($youtube) && isset($youtube['#image_link']['options'])){
          $build['field_youtube'][$key]['#image_link']['options']['attributes']['target'] = '_blank';
        }
      }
    }
  }
}

/**
 * Implements hook_osha_tmgmt_i18n_string_list().
 */
function osha_resources_osha_tmgmt_i18n_string_list() {
  module_load_include('inc', 'osha_resources', 'osha_resources.translations');
  return osha_resources_get_translatable_strings();
}

/**
 * Implements hook_field_formatter_info().
 */
function osha_resources_field_formatter_info() {
  $info = array(
    'file_as_title' => array(
      'label' => t('Node title as link to file'),
      'field types' => array('file'),
      'description' => t('Link to file using node title as link title.'),
    ),
  );
  $info['plain_file_url'] = array(
    'label' => t('Plain file url'),
    'description' => t('Displays file as plain url'),
    'field types' => array('file', 'image'),
    'settings' => array(
      'text' => t('View[file:name]'),
    ),
  );
  $info['contact_file_download_link'] = array(
    'label' => t('Download contact file link'),
    'description' => t('Displays a contact file link that will force the browser to download the file.'),
    'field types' => array('file', 'image'),
    'settings' => array(
      'text' => t('Download [file:name]'),
    ),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function osha_resources_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'file_as_title':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'osha_resources_file_as_title_format',
          '#entity' => $entity,
          '#file' => $item,
          '#delta' => $delta,
        );
      }
      break;

    case 'plain_file_url':
      $settings = $display['settings'];
      foreach ($items as $delta => $item) {
        $file = (object) $item;
        if (file_entity_access('download', $file)) {
          $element[$delta] = array(
            '#theme' => 'osha_resources_plain_file_url',
            '#entity' => $entity,
            '#field' => $field,
            '#file' => $file,
            '#text' => $settings['text'],
          );
        }
      }
      break;

    case 'contact_file_download_link':
      $settings = $display['settings'];
      foreach ($items as $delta => $item) {
        $file = (object) $item;
        if (file_entity_access('download', $file)) {
          $element[$delta] = array(
            '#theme' => 'osha_resources_download_link',
            '#entity' => $entity,
            '#field' => $field,
            '#file' => $file,
            '#text' => $settings['text'],
          );
        }
      }
      break;

  }
  return $element;
}


/**
 * Implements hook_theme().
 */
function osha_resources_theme() {
  return array(
    'osha_resources_file_as_title_format' => array(
      'variables' => array('entity' => NULL, 'file' => NULL, 'delta' => NULL),
    ),
    'osha_resources_download_link' => array(
      'variables' => array('file' => NULL, 'entity'=> NULL, 'field' => NULL, 'icon_directory' => NULL, 'text' => NULL),
    ),
    'osha_resources_plain_file_url' => array(
      'variables' => array('file' => NULL, 'entity'=> NULL, 'field' => NULL, 'icon_directory' => NULL, 'text' => NULL),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function osha_resources_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'contact_file_download_link') {
    $element['text'] = array(
      '#type' => 'textfield',
      '#title' => t('Link text'),
      '#description' => t('This field support tokens.'),
      '#default_value' => $settings['text'],
      '#required' => TRUE,
    );
  }

  return $element;
}

function osha_resources_video($ids = NULL) {
  static $video_ids = [];
  if ($ids) {
    $video_ids = $ids;
  }
  return $video_ids;
}

/**
 * Implements hook_node_presave().
 */
function osha_resources_node_presave($node) {
  // Save description from youtube.
  if (!empty($node->field_youtube)) {
    $key = variable_get('google_api_key', '');
    if (empty($key)) {
      drupal_set_message('Please set a Google api key in order to fetch Youtube video description', 'warning');
      return;
    }
    $wrapper = entity_metadata_wrapper('node', $node);
    if (!empty($wrapper->field_youtube->value()) && empty($wrapper->body->value())) {
      $video_id = $wrapper->field_youtube[0]->video_id->value();
      $api_query = [
        'part' => 'snippet',
        'id' => $video_id,
        'key' => $key,
      ];
      $api_url = url('https://content.googleapis.com/youtube/v3/videos', ['query' => $api_query]);
      $response = drupal_http_request($api_url);
      if ($response->code == 200) {
        $response_data = json_decode($response->data);
        if (!empty($response_data->items[0]->snippet->description)) {
          $desc = $response_data->items[0]->snippet->description;
          $wrapper->body->set(['value' => $desc]);
        }
      }
    }
  }
}

/**
 */
function theme_osha_resources_plain_file_url($variables) {
  $file = $variables['file'];
  $uri = file_entity_download_uri($file);
  $uri['options']['absolute'] = TRUE;

  $output = check_plain(url($uri['path'], $uri['options']));

  return $output;
}

/**
 * Copy of theme_file_file_link() for linking to the file download URL.
 *
 * @see theme_file_file_link()
 */
function theme_osha_resources_download_link($variables) {
  $key = str_replace('field_', '', $variables['field']['field_name']);
  $path = '/contact/' . $variables['entity']->nid . '/' . $key;

  $file = $variables['file'];
  $icon_directory = $variables['icon_directory'];

  $uri = file_entity_download_uri($file);
  $icon = theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $uri['options']['attributes']['type'] = $file->filemime . '; length=' . $file->filesize;

  // Provide the default link text.
  if (!isset($variables['text'])) {
    $variables['text'] = t('Download [file:name]');
  }

  // Peform unsanitized token replacement if $uri['options']['html'] is empty
  // since then l() will escape the link text.
  $variables['text'] = token_replace($variables['text'], array('file' => $file), array('clear' => TRUE, 'sanitize' => empty($uri['options']['html'])));

  $output = '<span class="file">' . $icon . ' ' . l($variables['text'], $path, $uri['options']);
  $output .= ' ' . '<span class="file-size">(' . format_size($file->filesize) . ')</span>';
  $output .= '</span>';

  return $output;
}


/**
 * Menu callback; download a single file entity.
 */
function osha_resources_download_page($node, $field) {
  $node = (array)$node;

  if (!isset($node['field_' . $field])) {
    return MENU_NOT_FOUND;
  }

  $lang = array_keys($node['field_' . $field]);
  $file = (object)$node['field_' . $field][$lang[0]][0];

  if (!file_entity_access('download', $file)) {
    return MENU_ACCESS_DENIED;
  }

  // Ensure there is a valid token to download this file.
  if (!variable_get('file_entity_allow_insecure_download', FALSE)) {
    if (!isset($_GET['token']) || $_GET['token'] !== file_entity_get_download_token($file)) {
      return MENU_ACCESS_DENIED;
    }
  }

  // If the file does not exist it can cause problems with file_transfer().
  if (!is_file($file->uri)) {
    return MENU_NOT_FOUND;
  }

  $headers = array(
    'Content-Type' => mime_header_encode($file->filemime),
    'Content-Disposition' => 'attachment; filename="' . mime_header_encode(drupal_basename($file->uri)) . '"',
    'Content-Length' => $file->filesize,
    'Content-Transfer-Encoding' => 'binary',
    'Pragma' => 'no-cache',
    'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',
    'Expires' => '0',
  );

  // Let other modules alter the download headers.
  drupal_alter('file_download_headers', $headers, $file);

  // Let other modules know the file is being downloaded.
  module_invoke_all('file_transfer', $file->uri, $headers);

  if (file_entity_file_is_local($file)) {
    // For local files, transfer the file and do not reveal the actual URL.
    file_transfer($file->uri, $headers);
  }
  else {
    // For remote files, just redirect the user to that file's actual URL.
    $headers['Location'] = file_create_url($file->uri);
    foreach ($headers as $name => $value) {
      drupal_add_http_header($name, $value);
    }
    drupal_send_headers();
    drupal_exit();
  }
}

/**
 * Implements hook_menu().
 */
function osha_resources_menu() {
  $items['contact/%node/%'] = array(
    'title' => 'Download',
    'page callback' => 'osha_resources_download_page',
    'page arguments' => array(1, 2),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*
 * Formats the file as title
 */
function theme_osha_resources_file_as_title_format($element) {
  $file = (object) $element['file'];
  $entity = (object) $element['entity'];
  $icon_directory = drupal_get_path('theme', 'osha_frontend') . '/images/file_icons';

  global $language;
  $name = isset($entity->title_field[$language->language][0])
    ? $entity->title_field[$language->language][0]['value']
    : $entity->title_field['en'][0]['value'];
  $output = '<a href="' . file_create_url($file->uri) . '">';
  $output .= theme('file_icon', array('file' => $file, 'icon_directory' => $icon_directory));
  $output .= '<span>'.$name.'</span>';
  $size = @filesize($file->uri);
  if ($size) {
    $output .= '<span class="related_size">(' . format_size($size) . ')</span>';
  }
  $output .= '</a>';

  return $output;
}
