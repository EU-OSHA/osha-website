<?php
/**
 * @file
 * Code for the OSHA Dangerous substances feature.
 */

include_once 'osha_dangerous_substances.features.inc';

/**
 * Implements hook_field_formatter_info().
 */
function osha_dangerous_substances_field_formatter_info() {
  return array(
    'practical_tool_title' => array(
      'label' => 'practical_tool title link',
      'field types' => array('text'),
      'description' => 'Displays link with extra params.',
    ),
    'field_collection_title' => array(
      'label' => t('Fields collection title'),
      'field types' => array('field_collection'),
      'settings' => array(
        'edit' => t('Edit'),
        'delete' => t('Delete'),
        'add' => t('Add'),
        'description' => TRUE,
      ),
    ),
    'external_url' => array(
      'label' => t('External url link'),
      'field types' => array('link_field'),
      'description' => t('External url Link'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function osha_dangerous_substances_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $elements = array();
  if ($display['type'] == 'field_collection_title') {
    $elements['edit'] = array(
      '#type' => 'textfield',
      '#title' => t('Edit link title'),
      '#default_value' => $settings['edit'],
      '#description' => t('Leave the title empty, to hide the link.'),
    );
    $elements['delete'] = array(
      '#type' => 'textfield',
      '#title' => t('Delete link title'),
      '#default_value' => $settings['delete'],
      '#description' => t('Leave the title empty, to hide the link.'),
    );
    $elements['add'] = array(
      '#type' => 'textfield',
      '#title' => t('Add link title'),
      '#default_value' => $settings['add'],
      '#description' => t('Leave the title empty, to hide the link.'),
    );
    $elements['description'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show the field description beside the add link.'),
      '#default_value' => $settings['description'],
      '#description' => t('If enabled and the add link is shown, the field description is shown in front of the add link.'),
    );
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function osha_dangerous_substances_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $output = array();
  if ($display['type'] == 'field_collection_title') {
    $links = array_filter(array_intersect_key($settings,
      array_flip(array('add', 'edit', 'delete'))));
    if ($links) {
      $output[] = t('Links: @links', array('@links' => check_plain(implode(', ', $links))));
    }
    else {
      $output[] = t('Links: none');
    }
  }

  return implode('<br>', $output);
}

/**
 * Implements hook_block_info().
 */
function osha_dangerous_substances_block_info() {
  // Block with clear filter link.
  $blocks['osha_ds_search_clear_filters'] = array(
    'info' => t('DS Search filters header with clear filter'),
    'status' => 1,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'themes/dangerous-substances/practical-tools-dangerous-substances/*',
    'cache' => DRUPAL_NO_CACHE,
    'weight' => 0,
  );

  $blocks['osha_ds_tools_text'] = array(
    'info' => t('DS Search tool text'),
    'status' => 1,
    'region' => '-1',
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function osha_dangerous_substances_block_view($delta = '') {
  global $language;

  switch ($delta) {
    case 'osha_ds_search_clear_filters':
      // Add header as in template.
      $content['header'] = array(
        '#type' => 'markup',
        '#markup' => '<h3>' . t('Filter results') . '</h3>',
      );
      $query_params = drupal_get_query_parameters();
      if (!empty($query_params)) {
        // Clear filter link
        // it's really just a link to current url without params.
        $content['link'] = array(
          '#type' => 'markup',
          '#markup' => l(t('Clear filter'), current_path()),
        );
      }
      return array(
        'subject' => '<none>',
        'content' => drupal_render($content),
      );
      break;
    case 'osha_ds_tools_text':
      $block['title'] = '<none>';
      $block['content'] = '';
      $nid = variable_get('practical_tools_and_guidance_on_dangerous_substances_nid', 0);
      if ($nid && $node = node_load($nid)) {
        $w = entity_metadata_wrapper('node', $node->nid);
        $block['content'] = '
      <div class="content">
        <div class="field field-name-body field-type-text-with-summary field-label-hidden">
          <div class="field-items">
            <div class="field-item even" property="content:encoded">
              <p class="Textfo">
                <span lang="EN-GB" xml:lang="EN-GB">' . $w->language($language->language)->body->value()['safe_value'] . '</span>
              </p>
            </div>
          </div>
        </div>
      </div>';

      }
      break;
  }
  return $block;
}

/**
 * Implements hook_views_post_render().
 */
function osha_dangerous_substances_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'practical_tools_and_guidance_on_dangerous_substances') {
    drupal_add_js(drupal_get_path('module', 'osha_dangerous_substances') . '/js/sort.js', array('weight' => 20));
    $form = drupal_get_form('osha_practical_tool_sort_form');
    $order_html = '<div class="sort-container col-xs-3">' . drupal_render($form) . '</div><span class="count-container pull-right">';
    $output = trim(str_replace('@order', $order_html, $output)) . '</span>';
  }
}

function osha_practical_tool_sort_form($form, $form_state) {
  $form = array();
  $form['sort_by'] = [
    '#type' => 'select',
    '#title' => t('Sort by'),
    '#default_value' => 'search_api_relevance',
    '#options' => [
      'search_api_relevance' => t('Relevance'),
      'field_publication_year' => t('Year of publication'),
    ],
  ];
  $form['sort_order'] = [
    '#type' => 'select',
    '#title' => t('Order'),
    '#default_value' => 'DESC',
    '#options' => [
      'DESC' => t('DESC'),
      'ASC' => t('ASC'),
    ],
  ];
  $form['sort_by']['#value'] = @$_REQUEST['sort_by'];
  $form['sort_order']['#value'] = @$_REQUEST['sort_order'];
  return $form;
}

/**
 * Implements hook_field_formatter_view().
 */
function osha_dangerous_substances_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'practical_tool_title':
      $output = isset($items[0]) ? $items[0]['safe_value'] : '';
      if (!empty($output)) {
        $output = l($output, 'node/' . $entity->nid, ['query' => ['destination' => request_uri()], 'absolute' => TRUE]);
      }
      $element = array(array('#markup' => $output));
      break;

    case 'external_url':
      foreach ($items as $delta => $item) {
        $link_options = $item;
        unset($link_options['title']);
        unset($link_options['url']);
        $link_options['attributes']['target'] = '_blank';
        $element[$delta]['#markup'] = $item['url'] ? l($item['url'], $item['url'], $link_options) : '';
      }
      break;

    case 'field_collection_title':
      foreach ($items as $delta => $item) {
        if ($field_collection = field_collection_field_get_entity($item)) {
          $name = $field_collection->field_fc_provider_name['und'][0]['value'];
          $output = $name;
          $element[$delta] = array('#markup' => $output);
        }
      }
      field_collection_field_formatter_links($element, $entity_type, $entity, $field, $instance, $langcode, $items, $display);
      break;
  }
  return $element;
}

function osha_dangerous_substances_term_page($term) {
  return disable_term_node_listings_term_page($term);
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add a file type named 'DS Public'.
 */
function osha_dangerous_substances_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['dangerous_substances'] = array(
    'label' => t('DS Public'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_node_access().
 */

/* function osha_dangerous_substances_node_access($node, $op, $account) {
 if ($op == 'view' && $node->type == 'dangerous_substances') {
    if (user_is_anonymous()) {
      return NODE_ACCESS_DENY;
    }
  }
  return NODE_ACCESS_IGNORE;
}
*/

/**
 * Implements hook_entity_view_mode_alter().
 */
function osha_dangerous_substances_entity_view_mode_alter(&$view_mode, $context) {
  // Only alter the view mode if we are on the test callback.
  if (($context['entity_type'] == 'node') && ($context['entity']->type == 'dangerous_substances')) {
    if (user_is_anonymous() || isset($_REQUEST['ds_public'])) {
      $view_mode = 'dangerous_substances';
    }
  }
}

function template_preprocess_osha_dangerous_substances_doc(&$vars) {
  $vars['header'] = $vars['rows']['header'];
  $vars['body'] = $vars['rows']['body'];
  $vars['footer'] = $vars['rows']['footer'];
}


/**
 * Implements hook_preprocess_views_data_export_doc_body().
 */
function template_preprocess_osha_dangerous_substances_doc_body(&$vars) {
  // Pass through the generic MS Office process.
  template_preprocess_views_data_export_msoffice_body($vars);
  $output = '';

  $flip = array(
    'even' => 'odd',
    'odd' => 'even',
  );
  $class = 'even';
  foreach ($vars['themed_rows'] as $number => $cells) {
    // Add odd/even class
    $class = $flip[$class];
    if (isset($attributes['class'])) {
      $attributes['class'] .= ' ' . $class;
    }
    else {
      $attributes['class'] = $class;
    }

    $output .= '<table class="tableBorder" cellpadding="0" cellspacing="0" border="0" width="100%">';
    // Build row
    foreach ($cells as $alias => $cell) {
      $output .= ' <tr' . drupal_attributes($attributes) . '>';
      $output .= _theme_table_cell(['width'=>"30%", 'data' => '<b>' . $vars['header'][$alias] . '</b>']);
      $output .= _theme_table_cell(['width'=>"70%", 'data' => $cell]);
      $output .= " </tr>\n";
    }
    $output .= "</table>";
    $output .= "<br /><br style='page-break-before:always;'/>";
  }

  $vars['body'] = $output;
}

/**
 * Implements hook_views_plugins().
 */
function osha_dangerous_substances_views_plugins() {
  $module_path = drupal_get_path('module', 'osha_dangerous_substances');

  return array(
    'style' => array(
      'osha_dangerous_substances_doc' => array(
        'title' => t('Doc card file'),
        'help' => t('Display the view as an Doc card file.'),
        'handler' => 'views_data_export_plugin_style_export',
        'export headers' => array('Content-Type' => 'application/vnd.ms-word'),
        'export feed type' => 'doc',
        'export feed text' => 'doc',
        'export feed file' => '%view.doc',
        'export feed icon' => drupal_get_path('module', 'views_data_export') . '/images/doc.png',
        'additional themes base' => 'osha_dangerous_substances_doc',
        'path' => $module_path . '/plugins',
        'parent' => 'views_data_export_doc',
        'theme' => 'osha_dangerous_substances_doc',
        'uses row plugin' => FALSE,
        'uses fields' => TRUE,
        'uses options' => TRUE,
        'type' => 'data_export',
      ),
    ),
  );
}

function osha_dangerous_substances_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  if($view->name == 'dangerous_substances') {
    drupal_add_css(drupal_get_path('module', 'osha_dangerous_substances') .'/css/osha_dangerous_substances.css');
  }
}

/**
 * Implements hook_theme().
 */
function osha_dangerous_substances_theme() {

  $theme = array();
  $path = drupal_get_path('module', 'osha_dangerous_substances');

  $theme['osha_dangerous_substances_doc'] = array(
    'path' => $path . '/templates',
    'template' => 'osha_dangerous_substances_doc',
    'variables' =>  array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
  );

  $theme['osha_dangerous_substances_doc_header'] = array(
    'path' => $path . '/templates',
    'template' => 'osha_dangerous_substances_doc_header',
    'variables' =>  array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
  );

  $theme['osha_dangerous_substances_doc_body'] = array(
    'path' => $path . '/templates',
    'template' => 'osha_dangerous_substances_doc_body',
    'variables' =>  array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
  );

  $theme['osha_dangerous_substances_doc_footer'] = array(
    'path' => $path . '/templates',
    'template' => 'osha_dangerous_substances_doc_footer',
    'variables' =>  array('view' => NULL, 'options' => NULL, 'rows' => NULL, 'title' => NULL),
  );
  return $theme;
}

// MDR-969: remove redirect on save
//function osha_dangerous_substances_node_save_redirect_submit($form, &$form_state){
//  if ($form_state['values']['type'] == 'dangerous_substances') {
//    unset($_GET['destination']);
//    $form_state['redirect'] = 'themes/dangerous-substances/search';
//  }
//}

function osha_dangerous_substances_custom_theme($theme = NULL) {
  $item = menu_get_object();
  if ((implode('_', arg()) == 'node_add_dangerous-substances') || ($item && $item->type == 'dangerous_substances')) {
    $theme = 'osha_frontend';
  }
  return $theme;
}

function osha_dangerous_substances_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'osha_dangerous_substances_filter_process_format';
      }
    }
  }
}

// remove guidelines and help text
function osha_dangerous_substances_filter_process_format($element) {
  if (isset($element['#format']) && $element['#format'] === "") {
    $element['#format'] = NULL;
  }
  $element = filter_process_format($element);
  if ($element['#bundle'] == 'dangerous_substances') {
    unset($element['format']['guidelines']);
    unset($element['format']['help']);
    $element['format']['format']['#options'] = [
      'dangerous_substances' => $element['format']['format']['#options']['dangerous_substances'],
      'dangerous_substances_minimal' => $element['format']['format']['#options']['dangerous_substances_minimal'],
    ];
    unset($element['format']['format']['']);
    $element['#format'] = 'dangerous_substances';
  }
  if ($element['format']['format']['#default_value'] == 'full_html') {
    $element['format']['format']['#default_value'] = 'full_html_minimal';
  }

  return $element;
}

function osha_dangerous_substances_facet_items_alter(&$build, &$settings) {
  if ($settings->facet == "field_summary") {
    if (isset($build[1])) {
      unset($build[1]);
    }
    if (isset($build['!'])) {
      $build['!']['#markup'] = t('Empty description');
    }
  }
  if ($settings->facet == "field_available_in_languages:value") {
    $list = language_list();
    foreach ($build as $lang => $item) {
      if (isset($list[$lang])) {
        $build[$lang]['#markup'] = $list[$lang]->name;
      } else {
        $build[$lang]['#markup'] = $lang;
      }
    }
  }
}

function osha_dangerous_substances_empty_description($item) {
  if ($item->type == 'dangerous_substances') {
    if (!$item->body) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function osha_dangerous_substances_entity_property_info_alter(&$info) {
  $info['node']['properties']['empty_description'] = array(
    'type' => 'boolean',
    'label' => t('Empty description'),
    'sanitized' => TRUE,
    'getter callback' => 'osha_dangerous_substances_empty_description',
  );
}

/**
 * Implements hook_form_alter().
 */
function osha_dangerous_substances_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id']=='views-exposed-form-dangerous-substances-overview-page') {
    $filter_id = 'description';
    $form[$filter_id]['#title'] = t('Empty description');
    $form[$filter_id]['#type'] = 'checkbox';
    $form[$filter_id]['#default_value'] = 0;
    $form[$filter_id]['#return_value'] = 1;
    unset($form[$filter_id]['#options']);

    $checked = isset($form_state['input'][$filter_id]) ? intval($_GET[$filter_id]) : $form[$filter_id]['#default_value'];
    // Now we know whether the checkbox is checked or not, set #value
    // accordingly.
    $form[$filter_id]['#value'] = $checked ? $form[$filter_id]['#return_value'] : 0;
  }

  if ($form_id == 'dangerous_substances_node_form') {
    //    if (!in_array('administrator', array_values($user->roles))) {
    //      $form['field_priority_area']['#access'] = FALSE;
    //    }
    $form['field_available_in_languages'][LANGUAGE_NONE]['#options'] = osha_sort_language_list($form['field_available_in_languages'][LANGUAGE_NONE]['#options']);
    $form['field_original_desc_language'][LANGUAGE_NONE]['#options'] = osha_sort_language_list($form['field_original_desc_language'][LANGUAGE_NONE]['#options']);

    //drupal_add_js(drupal_get_path('module', 'osha_dangerous_substances') . '/js/osha_dangerous_substances.js');
    if (!isset($form['#after_build'])) {
      $form['#after_build'] = array();
    }
    $form['#after_build'][] = '_osha_dangerous_substances_form_after_build';
    // Removed, see MDR-969
    //$form['actions']['submit']['#submit'][] = 'osha_dangerous_substances_node_save_redirect_submit';
    //if (isset($form['actions']['save_preview'])) {
    //  $form['actions']['save_preview']['#submit'][] = 'osha_dangerous_substances_node_save_redirect_submit';
    //}
    //if (isset($form['actions']['send_for_approval'])) {
    //  $form['actions']['send_for_approval']['#submit'][] = 'osha_dangerous_substances_node_save_redirect_submit';
    //}
  }
}

function _osha_dangerous_substances_get_other_tid($element, $field, $other_name = 'other') {
  foreach($element[$field]['und']['#options'] as $tid => $name) {
    if (strtolower(trim($name)) == $other_name) {
      return (string)$tid;
    }
  }
  if (isset($_REQUEST['debug'])) {
    watchdog('osha_dangerous_substances', '!field no other value found updated', array('!field' => $field) );
  }
  return '-1'; // todo ...
}

function _osha_dangerous_substances_form_after_build($form, $form_state) {

  // Provider other
  foreach (element_children($form['field_fc_provider'][LANGUAGE_NONE]) as $key) {
    if (isset($form['field_fc_provider'][LANGUAGE_NONE][$key]['field_provider_type'])) {
      $_other = _osha_dangerous_substances_get_other_tid($form['field_fc_provider'][LANGUAGE_NONE][$key], 'field_provider_type');
      $form['field_fc_provider'][LANGUAGE_NONE][$key]['field_type_provider_other']['#states'] = ['visible' => [ '#edit-field-fc-provider-und-' . $key . '-field-provider-type-und' => ['value' => [$_other]]]];
    }
  }

  // Country code
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_material_country');
  $form['field_country_other']['#states'] = ['visible'=>[ '#edit-field-material-country-und' => ['value' => [$_other]] ] ];

  // Languages other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_available_in_languages');
  $form['field_languages_other']['#states'] = ['visible'=>[ '#edit-field-available-in-languages-und' => ['value' => [$_other]] ] ];

  // Original languages other
  $_orig_other = _osha_dangerous_substances_get_other_tid($form, 'field_original_desc_language');
  $form['field_original_desc_lang_other']['#states'] = ['visible'=>[ '#edit-field-original-desc-language-und' => ['value' => [$_orig_other]] ] ];

  // Sector / Industry covered other todo not sure if needed
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_sector_industry_covered');
  $form['field_sector_industry_other']['#states'] = ['visible'=>[ '#edit-field-sector-industry-covered-und' => ['value' => [$_other]] ] ];

  // Tasks covered other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_tasks_covered');
  $form['field_tasks_other']['#states'] = ['visible'=>[ '#edit-field-tasks-covered-und' => ['value' => [$_other]] ] ];

  // Biological hazard other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_biological_hazard');
  $form['field_biological_hazard_other']['#states'] = ['visible'=>[ '#edit-field-biological-hazard-und' => ['value' => [$_other]] ] ];

  // Hazard - physical state other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_hazard_physical_state');
  $form['field_hazard_physical_other']['#states'] = ['visible'=>[ '#edit-field-hazard-physical-state-und' => ['value' => [$_other]] ] ];

  // Hazard health effect other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_hazard_health_effects');
  $form['field_hazard_health_other']['#states'] = ['visible'=>[ '#edit-field-hazard-health-effects-und' => ['value' => [$_other]] ] ];

  // Exposure route
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_exposure_route');
  $form['field_exposure_route_other']['#states'] = ['visible'=>[ '#edit-field-exposure-route-und' => ['value' => [$_other]] ] ];

  // Workers groups covered other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_worker_groups_type');
  $form['field_worker_groups_other']['#states'] = ['visible'=>[ '#edit-field-worker-groups-type-und' => ['value' => [$_other]] ] ];

  // Prevention measure other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_prevention_measure_type');
  $form['field_prevention_measures_other']['#states'] = ['visible'=>[ '#edit-field-prevention-measure-type-und' => ['value' => [$_other]] ] ];

  // Purpose of the material other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_material_purpose_type');
  $form['field_material_purpose_other']['#states'] = ['visible'=>[ '#edit-field-material-purpose-type-und' => ['value' => [$_other]] ] ];

  // Target group other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_target_group');
  $form['field_target_group_other']['#states'] = ['visible'=>[ '#edit-field-target-group-und' => ['value' => [$_other]] ] ];

  // Evaluation other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_evaluation');
  $form['field_evaluation_other']['#states'] = ['visible'=>[ '#edit-field-evaluation-und' => ['value' => [$_other]] ] ];

  // Type of visualisation material other
  $_other = _osha_dangerous_substances_get_other_tid($form, 'field_visualisation_material_typ');
  $form['field_visualisation_mat_other']['#states'] = ['visible'=>[ '#edit-field-visualisation-material-typ-und' => ['value' => [$_other]] ] ];

  $form['field_rights_description']['#states'] = ['visible'=>[ '#edit-field-item-type-und' => ['value' => 'Audiovisual'] ] ];
  $form['field_intellectual_property_righ']['#states'] = ['visible'=>[ '#edit-field-item-type-und' => ['value' => 'Audiovisual'] ] ];
  $form['field_media_format']['#states'] = ['visible'=>[ '#edit-field-item-type-und' => ['value' => 'Audiovisual'] ] ];
  $form['field_video_length']['#states'] = ['visible'=>[ '#edit-field-item-type-und' => ['value' => 'Audiovisual'] ] ];

  return $form;
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function osha_dangerous_substances_search_api_solr_query_alter(array &$call_args, SearchApiQueryInterface $query) {
  if (arg(1) == 'dangerous-substances') {
    $sort_order = strtolower(@$_REQUEST['sort_order']);
    $sort_by    = strtolower(@$_REQUEST['sort_by']);
    foreach($call_args['params']['fq'] as $k => $v) {
        if (strpos('.' . $v, 'sm_search_api_access_node:') && $k) {
          continue;
        }
        if (strpos('.' . $v, 'bs_status:"true") OR (is_author') && $k) {
          continue;
        }
      if (strpos('.' . $v, 'bs_status:') && $k && @$_REQUEST['description']) {
        $call_args['params']['fq'][$k] = 'bs_empty_description:"true"';
      }
    }
    if ($sort_by) {
      $call_args['params']['sort'] = 'ds_field_publication_year ';
      if ($sort_by == 'search_api_relevance') {
        $call_args['params']['sort'] = 'ds_search_api_relevance ';
      }

      if (!in_array($sort_order, ['asc', 'desc'])) {
        $sort_order = 'desc';
      }
      $call_args['params']['sort'] .= $sort_order;
    }
  }
}

function _osha_dangerous_substances_add_country_other() {

  $name = 'Other';
  $code = 'OT';

  $voc = taxonomy_vocabulary_machine_name_load('country');
  if (empty($voc)) {
    return ;
  }

  $terms = taxonomy_get_term_by_name($name, 'country');
  if (empty($terms)) {
    $term = new stdClass();
    $term->field_iso2[LANGUAGE_NONE][0]['value'] = $code;
    $term->vid = $voc->vid;
    $term->name_original = $name;
    $term->name = $name;
    taxonomy_term_save($term);
  }
}

function osha_dangerous_substances_add_taxonomy() {

  //_osha_dangerous_substances_add_country_other();

  $map = [
    'hazmap_categories' => [
      'name' => 'Hazmap categories',
      'file' => 'hazmap_categories',
      'code'=>'field_hazmap_categories_code'],

    'provider_type' => [
      'name' => 'Type of provider',
      'file' => 'provider_type',
      'code'=>'field_provider_type_code'],

    'biological_hazard' => [
      'name' => 'Biological hazard',
      'file' => 'biological_hazard',
      'code'=>'field_biological_hazard_code'],

    'hazard_physical_state' => [
      'name' => 'Chemical and biological hazards related to state and occurrence in the workplace',
      'file' => 'hazard_physical_state',
      'code'=>'field_hazard_health_effects_code'],

    'hazard_health_effects' => [
      'name' => 'Chemical hazards related to health effects',
      'file' => 'hazard_health_effects',
      'code'=>'field_hazard_physical_state_code'],

    'exposure_route' => [
      'name' => 'Exposure route',
      'file' => 'exposure_route',
      'code'=>'field_exposure_route_code'],

    'worker_groups' => [
      'name' => 'Type of workers',
      'file' => 'worker_groups',
      'code'=>'field_worker_groups_code'],

    'prevention_measures' => [
      'name' => 'Level of prevention',
      'file' => 'prevention_measures',
      'code'=>'field_prevention_measures_code'],

    'material_objective' => [
      'name' => 'Type of visualisation material',
      'file' => 'material_objective',
      'code'=>'field_material_objective_code'],

    'material_purpose' => [
      'name' => 'Type of information / purpose of the material',
      'file' => 'material_purpose',
      'code'=>'field_material_purpose_code'],

    'target_group' => [
      'name' => 'Proposal for target groups',
      'file' => 'target_group',
      'code'=>'field_target_group_code'],

    'evaluation' => [
      'name' => 'Quality / Assessment criteria',
      'file' => 'evaluation',
      'code'=>'field_evaluation_code'],
  ];

  $migration_module_dir = drupal_get_path('module', 'osha_dangerous_substances');
  $terms_created = 0;
  $terms_updated = 0;
  foreach($map as $machine_name => $voc_info) {
    $code_name = $voc_info['code'];
    $voc = taxonomy_vocabulary_machine_name_load($machine_name);
    if (empty($voc)) {
      $voc = new stdClass();
      $voc->name = $voc_info['name'];
      $voc->machine_name = $machine_name;
      taxonomy_vocabulary_save($voc);
    }
    $json_path = drupal_realpath($migration_module_dir . '/data/' . $voc_info['file'] . '.json');
    if (is_readable($json_path)) {
      $data = file_get_contents($json_path);
      $data = json_decode($data, TRUE);

      foreach ($data as $idx=>$row) {
        $name = $row['name'];
        if (!$name) {
          continue;
        }
        $terms = taxonomy_get_term_by_name($name, $machine_name);
        $thesaurus_id = @$row['thesaurus_id'];
        $level = @$row['level'];

        if (empty($terms)) {
          $term = [];
          $term[$code_name][LANGUAGE_NONE][0]['value'] = $row['code'];
          $term['field_prevention_level'][LANGUAGE_NONE][0]['value'] = $level;
          $term['field_thesaurus_id'][LANGUAGE_NONE][0]['value'] = $thesaurus_id;

          $term = (object)$term;
          $term->vid = $voc->vid;
          $term->name = $name;
          $term->weight = $idx;
          taxonomy_term_save($term);
          $terms_created++;
        }
        else {
          $tids = array_keys($terms);
          $term = $terms[$tids[0]];
          $term->weight = $idx;
          if (!$term->{$code_name}) {
            $term->{$code_name}[LANGUAGE_NONE][0]['value'] = $row['code'];
          }
          if ($thesaurus_id) {
            if (!$term->{'field_thesaurus_id'}) {
              $term->{'field_thesaurus_id'}[LANGUAGE_NONE][0]['value'] = $thesaurus_id;
            }
          }
          if ($level) {
            if (!$term->{'field_prevention_level'}) {
              $term->{'field_prevention_level'}[LANGUAGE_NONE][0]['value'] = $level;
            }
          }
          taxonomy_term_save($term);
          $terms_updated++;
        }
      }
    }
  }
  watchdog('osha_dangerous_substances', '!terms_created terms created, !terms_updated terms updated', array('!terms_created' => $terms_created, '!terms_updated' => $terms_updated) );
}
